
bangkok-brightly-lit-stm32-7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800671c  0800671c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006724  08006724  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006728  08006728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800672c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb4  20000060  0800678c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c14  0800678c  00024c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125e2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b98  00000000  00000000  000326b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd5  00000000  00000000  000361b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ea8  00000000  00000000  00036d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117a9  00000000  00000000  00039c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b8f6  00000000  00000000  0004b3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044bc  00000000  00000000  000e6cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000eb190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006584 	.word	0x08006584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006584 	.word	0x08006584

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000590:	f000 fc6c 	bl	8000e6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000594:	f000 f860 	bl	8000658 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000598:	f000 f970 	bl	800087c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800059c:	f000 f944 	bl	8000828 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80005a0:	f000 f8c4 	bl	800072c <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80005a4:	f000 f916 	bl	80007d4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005a8:	f002 fc04 	bl	8002db4 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of myQueue01 */
	myQueue01Handle = osMessageQueueNew(16, sizeof(char*),
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <main+0x88>)
 80005ae:	2104      	movs	r1, #4
 80005b0:	2010      	movs	r0, #16
 80005b2:	f002 fcf6 	bl	8002fa2 <osMessageQueueNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a17      	ldr	r2, [pc, #92]	; (8000618 <main+0x8c>)
 80005ba:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <main+0x90>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4817      	ldr	r0, [pc, #92]	; (8000620 <main+0x94>)
 80005c2:	f002 fc41 	bl	8002e48 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a16      	ldr	r2, [pc, #88]	; (8000624 <main+0x98>)
 80005ca:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005cc:	4a16      	ldr	r2, [pc, #88]	; (8000628 <main+0x9c>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4816      	ldr	r0, [pc, #88]	; (800062c <main+0xa0>)
 80005d2:	f002 fc39 	bl	8002e48 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a15      	ldr	r2, [pc, #84]	; (8000630 <main+0xa4>)
 80005da:	6013      	str	r3, [r2, #0]

	/* creation of myTask03 */
	myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80005dc:	4a15      	ldr	r2, [pc, #84]	; (8000634 <main+0xa8>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4815      	ldr	r0, [pc, #84]	; (8000638 <main+0xac>)
 80005e2:	f002 fc31 	bl	8002e48 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <main+0xb0>)
 80005ea:	6013      	str	r3, [r2, #0]

	/* creation of myTask04 */
	myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <main+0xb4>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4814      	ldr	r0, [pc, #80]	; (8000644 <main+0xb8>)
 80005f2:	f002 fc29 	bl	8002e48 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <main+0xbc>)
 80005fa:	6013      	str	r3, [r2, #0]

	/* creation of myTask05 */
	myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <main+0xc0>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <main+0xc4>)
 8000602:	f002 fc21 	bl	8002e48 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <main+0xc8>)
 800060a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800060c:	f002 fbf6 	bl	8002dfc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000610:	e7fe      	b.n	8000610 <main+0x84>
 8000612:	bf00      	nop
 8000614:	080066b8 	.word	0x080066b8
 8000618:	20000168 	.word	0x20000168
 800061c:	08006604 	.word	0x08006604
 8000620:	08000959 	.word	0x08000959
 8000624:	20000154 	.word	0x20000154
 8000628:	08006628 	.word	0x08006628
 800062c:	08000969 	.word	0x08000969
 8000630:	20000158 	.word	0x20000158
 8000634:	0800664c 	.word	0x0800664c
 8000638:	080009f5 	.word	0x080009f5
 800063c:	2000015c 	.word	0x2000015c
 8000640:	08006670 	.word	0x08006670
 8000644:	08000a75 	.word	0x08000a75
 8000648:	20000160 	.word	0x20000160
 800064c:	08006694 	.word	0x08006694
 8000650:	08000b11 	.word	0x08000b11
 8000654:	20000164 	.word	0x20000164

08000658 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fbb4 	bl	8005dd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fa90 	bl	8001c04 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x96>
		Error_Handler();
 80006ea:	f000 fa37 	bl	8000b5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fcf2 	bl	80020f4 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
		Error_Handler();
 8000716:	f000 fa21 	bl	8000b5c <Error_Handler>
	}
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <MX_ADC1_Init+0xa0>)
 8000742:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_ADC1_Init+0x9c>)
 800074e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000752:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_ADC1_Init+0x9c>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC1_Init+0x9c>)
 800076a:	2200      	movs	r2, #0
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_ADC1_Init+0xa4>)
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_ADC1_Init+0x9c>)
 800077c:	2201      	movs	r2, #1
 800077e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x9c>)
 800078a:	2201      	movs	r2, #1
 800078c:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000790:	f000 fbde 	bl	8000f50 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x72>
		Error_Handler();
 800079a:	f000 f9df 	bl	8000b5c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800079e:	2301      	movs	r3, #1
 80007a0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <MX_ADC1_Init+0x9c>)
 80007b0:	f000 fd5e 	bl	8001270 <HAL_ADC_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x92>
		Error_Handler();
 80007ba:	f000 f9cf 	bl	8000b5c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000007c 	.word	0x2000007c
 80007cc:	40012000 	.word	0x40012000
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART1_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 800080c:	f001 fe92 	bl	8002534 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000816:	f000 f9a1 	bl	8000b5c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000c4 	.word	0x200000c4
 8000824:	40011000 	.word	0x40011000

08000828 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_USART2_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000860:	f001 fe68 	bl	8002534 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800086a:	f000 f977 	bl	8000b5c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000010c 	.word	0x2000010c
 8000878:	40004400 	.word	0x40004400

0800087c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2c      	ldr	r2, [pc, #176]	; (800094c <MX_GPIO_Init+0xd0>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_6, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2160      	movs	r1, #96	; 0x60
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_GPIO_Init+0xd4>)
 8000908:	f001 f962 	bl	8001bd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000912:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000916:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_GPIO_Init+0xd8>)
 8000924:	f000 ffb8 	bl	8001898 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_6;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0xd4>)
 8000940:	f000 ffaa 	bl	8001898 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000
 8000954:	40020800 	.word	0x40020800

08000958 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f002 fb03 	bl	8002f6c <osDelay>
 8000966:	e7fb      	b.n	8000960 <StartDefaultTask+0x8>

08000968 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		int adcval = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Start(&hadc1);
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <StartTask02+0x80>)
 8000976:	f000 fb2f 	bl	8000fd8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800097a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800097e:	481a      	ldr	r0, [pc, #104]	; (80009e8 <StartTask02+0x80>)
 8000980:	f000 fbde 	bl	8001140 <HAL_ADC_PollForConversion>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1f2      	bne.n	8000970 <StartTask02+0x8>
			adcval = HAL_ADC_GetValue(&hadc1);
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <StartTask02+0x80>)
 800098c:	f000 fc63 	bl	8001256 <HAL_ADC_GetValue>
 8000990:	4603      	mov	r3, r0
 8000992:	60fb      	str	r3, [r7, #12]
			globalLight = adcval;
 8000994:	4a15      	ldr	r2, [pc, #84]	; (80009ec <StartTask02+0x84>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6013      	str	r3, [r2, #0]
//			if (status == osOK) { // Mutex acquired successfully
//				HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
//				osMutexRelease(myMutex01Handle);
//				osDelay(100);
//			}
			char *clone = malloc(32 * sizeof(char));
 800099a:	2020      	movs	r0, #32
 800099c:	f005 f946 	bl	8005c2c <malloc>
 80009a0:	4603      	mov	r3, r0
 80009a2:	60bb      	str	r3, [r7, #8]
			clone[0] = 0b11000000 | (adcval >> 7);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	11db      	asrs	r3, r3, #7
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80009ae:	b25a      	sxtb	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	701a      	strb	r2, [r3, #0]
			clone[1] = adcval & 0b01111111;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	3301      	adds	r3, #1
 80009be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	701a      	strb	r2, [r3, #0]
			clone[2] = '\0';
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	3302      	adds	r3, #2
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
//			sprintf(clone, "l%dx ", adcval);
			osMessageQueuePut(myQueue01Handle, &clone, 0, 100);
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <StartTask02+0x88>)
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	f107 0108 	add.w	r1, r7, #8
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	2200      	movs	r2, #0
 80009da:	f002 fb55 	bl	8003088 <osMessageQueuePut>
			osDelay(500);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f002 fac3 	bl	8002f6c <osDelay>
	for (;;) {
 80009e6:	e7c3      	b.n	8000970 <StartTask02+0x8>
 80009e8:	2000007c 	.word	0x2000007c
 80009ec:	20000170 	.word	0x20000170
 80009f0:	20000168 	.word	0x20000168

080009f4 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		uint8_t got = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80009fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a00:	4819      	ldr	r0, [pc, #100]	; (8000a68 <StartTask03+0x74>)
 8000a02:	f001 f8cd 	bl	8001ba0 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	75fb      	strb	r3, [r7, #23]
		char *clone = malloc(32 * sizeof(char));
 8000a0a:	2020      	movs	r0, #32
 8000a0c:	f005 f90e 	bl	8005c2c <malloc>
 8000a10:	4603      	mov	r3, r0
 8000a12:	60fb      	str	r3, [r7, #12]
		clone[0] = 0b10000000;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	701a      	strb	r2, [r3, #0]
		clone[2] = '\0';
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]

		int pinval;

		if (got) {
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d009      	beq.n	8000a3c <StartTask03+0x48>
			clone[1] = 1;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
			globalPir = 1;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <StartTask03+0x78>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
//			sprintf(clone, "p1x ");
			pinval = GPIO_PIN_SET;
 8000a36:	2301      	movs	r3, #1
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	e008      	b.n	8000a4e <StartTask03+0x5a>
//			globalPir = 1;
		} else {
			clone[1] = 0;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
			globalPir = 0;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <StartTask03+0x78>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
//			sprintf(clone, "p0x ");
			pinval = GPIO_PIN_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
		//			HAL_UART_Transmit(&huart2, "yes", strlen("yes"), 1000);
		//			osMutexRelease(myMutex01Handle);
		//			osDelay(100);
		//		}

		osMessageQueuePut(myQueue01Handle, &clone, 0, 100);
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <StartTask03+0x7c>)
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	f107 010c 	add.w	r1, r7, #12
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f002 fb15 	bl	8003088 <osMessageQueuePut>
		//		HAL_UART_Transmit(&huart2, "hello\r\n", strlen( "hello\r\n"), 1000);
		osDelay(500);
 8000a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a62:	f002 fa83 	bl	8002f6c <osDelay>
	for (;;) {
 8000a66:	e7c9      	b.n	80009fc <StartTask03+0x8>
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	2000016c 	.word	0x2000016c
 8000a70:	20000168 	.word	0x20000168

08000a74 <StartTask04>:
 * @brief Function implementing the myTask04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b09c      	sub	sp, #112	; 0x70
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
		char *buf;

		if (osMessageQueueGet(myQueue01Handle, &buf, NULL, osWaitForever)
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <StartTask04+0x84>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f002 fb5d 	bl	8003148 <osMessageQueueGet>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f3      	bne.n	8000a7c <StartTask04+0x8>
				== osOK) {
			char temp[100];
			sprintf(temp, "%d %d\r\n", globalLight, globalPir);
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <StartTask04+0x88>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <StartTask04+0x8c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f107 0008 	add.w	r0, r7, #8
 8000aa0:	4918      	ldr	r1, [pc, #96]	; (8000b04 <StartTask04+0x90>)
 8000aa2:	f005 f977 	bl	8005d94 <siprintf>

			//			int a = buf[0];
			//			a <<= 8;
			//			a |= buf[1];
			//			sprintf(temp, "%d\r\n", a);
			HAL_UART_Transmit(&huart2, temp, strlen(temp), HAL_MAX_DELAY);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fb98 	bl	80001e0 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f107 0108 	add.w	r1, r7, #8
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	4812      	ldr	r0, [pc, #72]	; (8000b08 <StartTask04+0x94>)
 8000abe:	f001 fd89 	bl	80025d4 <HAL_UART_Transmit>

			//            temp[0] = val;
			//            HAL_UART_Transmit(&huart1, temp, 1,HAL_MAX_DELAY);
			//            osDelay(100);

			temp[0] = buf[0];
 8000ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	723b      	strb	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, temp, 1, HAL_MAX_DELAY);
 8000ac8:	f107 0108 	add.w	r1, r7, #8
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <StartTask04+0x98>)
 8000ad4:	f001 fd7e 	bl	80025d4 <HAL_UART_Transmit>
			temp[0] = buf[1];
 8000ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ada:	785b      	ldrb	r3, [r3, #1]
 8000adc:	723b      	strb	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, temp, 1, HAL_MAX_DELAY);
 8000ade:	f107 0108 	add.w	r1, r7, #8
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <StartTask04+0x98>)
 8000aea:	f001 fd73 	bl	80025d4 <HAL_UART_Transmit>

			//            HAL_UART_Transmit(&huart1, (uint8_t) buf, strlen(buf),
			//            HAL_MAX_DELAY);
			//            HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 500);
			//            free(buf);
			osDelay(100);
 8000aee:	2064      	movs	r0, #100	; 0x64
 8000af0:	f002 fa3c 	bl	8002f6c <osDelay>
	for (;;) {
 8000af4:	e7c2      	b.n	8000a7c <StartTask04+0x8>
 8000af6:	bf00      	nop
 8000af8:	20000168 	.word	0x20000168
 8000afc:	20000170 	.word	0x20000170
 8000b00:	2000016c 	.word	0x2000016c
 8000b04:	080065e4 	.word	0x080065e4
 8000b08:	2000010c 	.word	0x2000010c
 8000b0c:	200000c4 	.word	0x200000c4

08000b10 <StartTask05>:
 * @brief Function implementing the myTask05 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	for (;;) {
		if (globalLight > 900 && globalPir == 1) {
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <StartTask05+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000b20:	dd0d      	ble.n	8000b3e <StartTask05+0x2e>
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <StartTask05+0x44>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d109      	bne.n	8000b3e <StartTask05+0x2e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	480a      	ldr	r0, [pc, #40]	; (8000b58 <StartTask05+0x48>)
 8000b30:	f001 f84e 	bl	8001bd0 <HAL_GPIO_WritePin>
			osDelay(1000);
 8000b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b38:	f002 fa18 	bl	8002f6c <osDelay>
 8000b3c:	e007      	b.n	8000b4e <StartTask05+0x3e>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <StartTask05+0x48>)
 8000b44:	f001 f844 	bl	8001bd0 <HAL_GPIO_WritePin>
			osDelay(10);
 8000b48:	200a      	movs	r0, #10
 8000b4a:	f002 fa0f 	bl	8002f6c <osDelay>
		if (globalLight > 900 && globalPir == 1) {
 8000b4e:	e7e3      	b.n	8000b18 <StartTask05+0x8>
 8000b50:	20000170 	.word	0x20000170
 8000b54:	2000016c 	.word	0x2000016c
 8000b58:	40020000 	.word	0x40020000

08000b5c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_MspInit+0x54>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <HAL_MspInit+0x54>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x54>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_MspInit+0x54>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_MspInit+0x54>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_MspInit+0x54>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	210f      	movs	r1, #15
 8000baa:	f06f 0001 	mvn.w	r0, #1
 8000bae:	f000 fe4a 	bl	8001846 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_ADC_MspInit+0x7c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d127      	bne.n	8000c32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_ADC_MspInit+0x80>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <HAL_ADC_MspInit+0x80>)
 8000bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_ADC_MspInit+0x80>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_ADC_MspInit+0x80>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_ADC_MspInit+0x80>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_ADC_MspInit+0x80>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_ADC_MspInit+0x84>)
 8000c2e:	f000 fe33 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40012000 	.word	0x40012000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <HAL_UART_MspInit+0xe8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12d      	bne.n	8000cc6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a29      	ldr	r2, [pc, #164]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <HAL_UART_MspInit+0xf0>)
 8000cc0:	f000 fdea 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc4:	e030      	b.n	8000d28 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <HAL_UART_MspInit+0xf4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d12b      	bne.n	8000d28 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_UART_MspInit+0xec>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_UART_MspInit+0xf0>)
 8000d24:	f000 fdb8 	bl	8001898 <HAL_GPIO_Init>
}
 8000d28:	bf00      	nop
 8000d2a:	3730      	adds	r7, #48	; 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40004400 	.word	0x40004400

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f8ce 	bl	8000f10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d74:	f003 fef2 	bl	8004b5c <xTaskGetSchedulerState>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d001      	beq.n	8000d82 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d7e:	f004 fcdb 	bl	8005738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f005 f824 	bl	8005e04 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	20000174 	.word	0x20000174
 8000df0:	20004c18 	.word	0x20004c18

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1c:	f7ff ffea 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f004 ffe3 	bl	8005e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fb9f 	bl	800058c <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e5c:	0800672c 	.word	0x0800672c
  ldr r2, =_sbss
 8000e60:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e64:	20004c14 	.word	0x20004c14

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 fccb 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fe62 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fcd5 	bl	800187e <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 fcab 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000178 	.word	0x20000178

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000178 	.word	0x20000178

08000f50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e033      	b.n	8000fce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d109      	bne.n	8000f82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fe26 	bl	8000bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d118      	bne.n	8000fc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	f043 0202 	orr.w	r2, r3, #2
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 fa96 	bl	80014d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f023 0303 	bic.w	r3, r3, #3
 8000fb6:	f043 0201 	orr.w	r2, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fbe:	e001      	b.n	8000fc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d101      	bne.n	8000ff2 <HAL_ADC_Start+0x1a>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e097      	b.n	8001122 <HAL_ADC_Start+0x14a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b01      	cmp	r3, #1
 8001006:	d018      	beq.n	800103a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001018:	4b45      	ldr	r3, [pc, #276]	; (8001130 <HAL_ADC_Start+0x158>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a45      	ldr	r2, [pc, #276]	; (8001134 <HAL_ADC_Start+0x15c>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9a      	lsrs	r2, r3, #18
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800102c:	e002      	b.n	8001034 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	3b01      	subs	r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f9      	bne.n	800102e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d15f      	bne.n	8001108 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001072:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001086:	d106      	bne.n	8001096 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	f023 0206 	bic.w	r2, r3, #6
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	645a      	str	r2, [r3, #68]	; 0x44
 8001094:	e002      	b.n	800109c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <HAL_ADC_Start+0x160>)
 80010a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010b0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10f      	bne.n	80010de <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d129      	bne.n	8001120 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	e020      	b.n	8001120 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a16      	ldr	r2, [pc, #88]	; (800113c <HAL_ADC_Start+0x164>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d11b      	bne.n	8001120 <HAL_ADC_Start+0x148>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d114      	bne.n	8001120 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	e00b      	b.n	8001120 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f043 0210 	orr.w	r2, r3, #16
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	f043 0201 	orr.w	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000
 8001134:	431bde83 	.word	0x431bde83
 8001138:	40012300 	.word	0x40012300
 800113c:	40012000 	.word	0x40012000

08001140 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115c:	d113      	bne.n	8001186 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800116c:	d10b      	bne.n	8001186 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f043 0220 	orr.w	r2, r3, #32
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e063      	b.n	800124e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001186:	f7ff fed7 	bl	8000f38 <HAL_GetTick>
 800118a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800118c:	e021      	b.n	80011d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001194:	d01d      	beq.n	80011d2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <HAL_ADC_PollForConversion+0x6c>
 800119c:	f7ff fecc 	bl	8000f38 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d212      	bcs.n	80011d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d00b      	beq.n	80011d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f043 0204 	orr.w	r2, r3, #4
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e03d      	b.n	800124e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d1d6      	bne.n	800118e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f06f 0212 	mvn.w	r2, #18
 80011e8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d123      	bne.n	800124c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001208:	2b00      	cmp	r3, #0
 800120a:	d11f      	bne.n	800124c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001224:	2b00      	cmp	r3, #0
 8001226:	d111      	bne.n	800124c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d105      	bne.n	800124c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1c>
 8001288:	2302      	movs	r3, #2
 800128a:	e113      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x244>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b09      	cmp	r3, #9
 800129a:	d925      	bls.n	80012e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68d9      	ldr	r1, [r3, #12]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	3b1e      	subs	r3, #30
 80012b2:	2207      	movs	r2, #7
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43da      	mvns	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	400a      	ands	r2, r1
 80012c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	4603      	mov	r3, r0
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4403      	add	r3, r0
 80012da:	3b1e      	subs	r3, #30
 80012dc:	409a      	lsls	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	e022      	b.n	800132e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6919      	ldr	r1, [r3, #16]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	2207      	movs	r2, #7
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	400a      	ands	r2, r1
 800130a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6919      	ldr	r1, [r3, #16]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	4603      	mov	r3, r0
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4403      	add	r3, r0
 8001324:	409a      	lsls	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b06      	cmp	r3, #6
 8001334:	d824      	bhi.n	8001380 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	3b05      	subs	r3, #5
 8001348:	221f      	movs	r2, #31
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	400a      	ands	r2, r1
 8001356:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	3b05      	subs	r3, #5
 8001372:	fa00 f203 	lsl.w	r2, r0, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	635a      	str	r2, [r3, #52]	; 0x34
 800137e:	e04c      	b.n	800141a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d824      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3b23      	subs	r3, #35	; 0x23
 800139a:	221f      	movs	r2, #31
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43da      	mvns	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	400a      	ands	r2, r1
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	3b23      	subs	r3, #35	; 0x23
 80013c4:	fa00 f203 	lsl.w	r2, r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
 80013d0:	e023      	b.n	800141a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	3b41      	subs	r3, #65	; 0x41
 80013e4:	221f      	movs	r2, #31
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	400a      	ands	r2, r1
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	3b41      	subs	r3, #65	; 0x41
 800140e:	fa00 f203 	lsl.w	r2, r0, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_ADC_ConfigChannel+0x250>)
 800141c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <HAL_ADC_ConfigChannel+0x254>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d10f      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1d8>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b12      	cmp	r3, #18
 800142e:	d10b      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_ADC_ConfigChannel+0x254>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12b      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x23a>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_ADC_ConfigChannel+0x258>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d003      	beq.n	8001464 <HAL_ADC_ConfigChannel+0x1f4>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b11      	cmp	r3, #17
 8001462:	d122      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_ADC_ConfigChannel+0x258>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d111      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_ADC_ConfigChannel+0x25c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_ADC_ConfigChannel+0x260>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	0c9a      	lsrs	r2, r3, #18
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800149c:	e002      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f9      	bne.n	800149e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40012300 	.word	0x40012300
 80014c4:	40012000 	.word	0x40012000
 80014c8:	10000012 	.word	0x10000012
 80014cc:	20000000 	.word	0x20000000
 80014d0:	431bde83 	.word	0x431bde83

080014d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014dc:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <ADC_Init+0x1f0>)
 80014de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	021a      	lsls	r2, r3, #8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800152c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <ADC_Init+0x1f4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800159c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e00f      	b.n	80015d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0202 	bic.w	r2, r2, #2
 80015e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e1b      	ldrb	r3, [r3, #24]
 80015ec:	005a      	lsls	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01b      	beq.n	8001638 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800161e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	3b01      	subs	r3, #1
 800162c:	035a      	lsls	r2, r3, #13
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	e007      	b.n	8001648 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001646:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	3b01      	subs	r3, #1
 8001664:	051a      	lsls	r2, r3, #20
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800167c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6899      	ldr	r1, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800168a:	025a      	lsls	r2, r3, #9
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	029a      	lsls	r2, r3, #10
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40012300 	.word	0x40012300
 80016c8:	0f000001 	.word	0x0f000001

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff8e 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff47 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff5c 	bl	8001714 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff8e 	bl	8001784 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffb0 	bl	80017ec <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e159      	b.n	8001b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8148 	bne.w	8001b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d005      	beq.n	80018ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b03      	cmp	r3, #3
 8001956:	d017      	beq.n	8001988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a2 	beq.w	8001b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3a:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a49      	ldr	r2, [pc, #292]	; (8001b88 <HAL_GPIO_Init+0x2f0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x202>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a48      	ldr	r2, [pc, #288]	; (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x1fe>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a47      	ldr	r2, [pc, #284]	; (8001b90 <HAL_GPIO_Init+0x2f8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a46      	ldr	r2, [pc, #280]	; (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x1f6>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <HAL_GPIO_Init+0x300>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x1f2>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a2f      	ldr	r2, [pc, #188]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f aea2 	bls.w	80018b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e001      	b.n	8001bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bec:	e003      	b.n	8001bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	041a      	lsls	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e267      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d075      	beq.n	8001d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d00c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2e:	4b85      	ldr	r3, [pc, #532]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d112      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3a:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c46:	d10b      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	4b7e      	ldr	r3, [pc, #504]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d05b      	beq.n	8001d0c <HAL_RCC_OscConfig+0x108>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d157      	bne.n	8001d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e242      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c68:	d106      	bne.n	8001c78 <HAL_RCC_OscConfig+0x74>
 8001c6a:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a75      	ldr	r2, [pc, #468]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b70      	ldr	r3, [pc, #448]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6f      	ldr	r2, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6c      	ldr	r2, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a68      	ldr	r2, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b66      	ldr	r3, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a65      	ldr	r2, [pc, #404]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f93c 	bl	8000f38 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f938 	bl	8000f38 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e207      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xc0>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f928 	bl	8000f38 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f924 	bl	8000f38 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1f3      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0xe8>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x152>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1c7      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4937      	ldr	r1, [pc, #220]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f8dd 	bl	8000f38 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f8d9 	bl	8000f38 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1a8      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4925      	ldr	r1, [pc, #148]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f8bc 	bl	8000f38 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f8b8 	bl	8000f38 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e187      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d036      	beq.n	8001e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_RCC_OscConfig+0x248>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f89c 	bl	8000f38 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff f898 	bl	8000f38 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e167      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x240>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x200>
 8001e22:	e01b      	b.n	8001e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_OscConfig+0x248>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f885 	bl	8000f38 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	e00e      	b.n	8001e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e32:	f7ff f881 	bl	8000f38 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d907      	bls.n	8001e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e150      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
 8001e44:	40023800 	.word	0x40023800
 8001e48:	42470000 	.word	0x42470000
 8001e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4b88      	ldr	r3, [pc, #544]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ea      	bne.n	8001e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8097 	beq.w	8001f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10f      	bne.n	8001e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9a:	4b77      	ldr	r3, [pc, #476]	; (8002078 <HAL_RCC_OscConfig+0x474>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea6:	4b74      	ldr	r3, [pc, #464]	; (8002078 <HAL_RCC_OscConfig+0x474>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a73      	ldr	r2, [pc, #460]	; (8002078 <HAL_RCC_OscConfig+0x474>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff f841 	bl	8000f38 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7ff f83d 	bl	8000f38 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e10c      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x474>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x2ea>
 8001ee0:	4b64      	ldr	r3, [pc, #400]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a63      	ldr	r2, [pc, #396]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	e01c      	b.n	8001f28 <HAL_RCC_OscConfig+0x324>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x30c>
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	4a5e      	ldr	r2, [pc, #376]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6713      	str	r3, [r2, #112]	; 0x70
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a5b      	ldr	r2, [pc, #364]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0x324>
 8001f10:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a57      	ldr	r2, [pc, #348]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	4b55      	ldr	r3, [pc, #340]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a54      	ldr	r2, [pc, #336]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f22:	f023 0304 	bic.w	r3, r3, #4
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d015      	beq.n	8001f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7ff f802 	bl	8000f38 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7fe fffe 	bl	8000f38 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0cb      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0ee      	beq.n	8001f38 <HAL_RCC_OscConfig+0x334>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe ffec 	bl	8000f38 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7fe ffe8 	bl	8000f38 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e0b5      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ee      	bne.n	8001f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	4a38      	ldr	r2, [pc, #224]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a1 	beq.w	80020e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa2:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d05c      	beq.n	8002068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d141      	bne.n	800203a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_RCC_OscConfig+0x478>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ffbc 	bl	8000f38 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe ffb8 	bl	8000f38 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e087      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	019b      	lsls	r3, r3, #6
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	491b      	ldr	r1, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCC_OscConfig+0x478>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe ff91 	bl	8000f38 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7fe ff8d 	bl	8000f38 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e05c      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x416>
 8002038:	e054      	b.n	80020e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_RCC_OscConfig+0x478>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe ff7a 	bl	8000f38 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe ff76 	bl	8000f38 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e045      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x470>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x444>
 8002066:	e03d      	b.n	80020e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e038      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
 8002074:	40023800 	.word	0x40023800
 8002078:	40007000 	.word	0x40007000
 800207c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_RCC_OscConfig+0x4ec>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d028      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d121      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d11a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020b0:	4013      	ands	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d111      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800

080020f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0cc      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b68      	ldr	r3, [pc, #416]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d90c      	bls.n	8002130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d044      	beq.n	8002214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d119      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e067      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4934      	ldr	r1, [pc, #208]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e4:	f7fe fea8 	bl	8000f38 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7fe fea4 	bl	8000f38 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e04f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d20c      	bcs.n	800223c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fe08 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	080066d0 	.word	0x080066d0
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b094      	sub	sp, #80	; 0x50
 80022c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
 80022cc:	2300      	movs	r3, #0
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d0:	2300      	movs	r3, #0
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d8:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d00d      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	f200 80e1 	bhi.w	80024ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x3a>
 80022f2:	e0db      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022f8:	e0db      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022fe:	e0d8      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	2200      	movs	r2, #0
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002320:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
 800232a:	2300      	movs	r3, #0
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
 800232e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002332:	4622      	mov	r2, r4
 8002334:	462b      	mov	r3, r5
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002344:	0150      	lsls	r0, r2, #5
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4621      	mov	r1, r4
 800234c:	1a51      	subs	r1, r2, r1
 800234e:	6139      	str	r1, [r7, #16]
 8002350:	4629      	mov	r1, r5
 8002352:	eb63 0301 	sbc.w	r3, r3, r1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002364:	4659      	mov	r1, fp
 8002366:	018b      	lsls	r3, r1, #6
 8002368:	4651      	mov	r1, sl
 800236a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800236e:	4651      	mov	r1, sl
 8002370:	018a      	lsls	r2, r1, #6
 8002372:	4651      	mov	r1, sl
 8002374:	ebb2 0801 	subs.w	r8, r2, r1
 8002378:	4659      	mov	r1, fp
 800237a:	eb63 0901 	sbc.w	r9, r3, r1
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800238a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800238e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002392:	4690      	mov	r8, r2
 8002394:	4699      	mov	r9, r3
 8002396:	4623      	mov	r3, r4
 8002398:	eb18 0303 	adds.w	r3, r8, r3
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	462b      	mov	r3, r5
 80023a0:	eb49 0303 	adc.w	r3, r9, r3
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023b2:	4629      	mov	r1, r5
 80023b4:	024b      	lsls	r3, r1, #9
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023bc:	4621      	mov	r1, r4
 80023be:	024a      	lsls	r2, r1, #9
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c6:	2200      	movs	r2, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023d0:	f7fd ff5e 	bl	8000290 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023dc:	e058      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	2200      	movs	r2, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	4611      	mov	r1, r2
 80023ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	f04f 0000 	mov.w	r0, #0
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	0159      	lsls	r1, r3, #5
 8002406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240a:	0150      	lsls	r0, r2, #5
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4641      	mov	r1, r8
 8002412:	ebb2 0a01 	subs.w	sl, r2, r1
 8002416:	4649      	mov	r1, r9
 8002418:	eb63 0b01 	sbc.w	fp, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800242c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002430:	ebb2 040a 	subs.w	r4, r2, sl
 8002434:	eb63 050b 	sbc.w	r5, r3, fp
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	00eb      	lsls	r3, r5, #3
 8002442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002446:	00e2      	lsls	r2, r4, #3
 8002448:	4614      	mov	r4, r2
 800244a:	461d      	mov	r5, r3
 800244c:	4643      	mov	r3, r8
 800244e:	18e3      	adds	r3, r4, r3
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	464b      	mov	r3, r9
 8002454:	eb45 0303 	adc.w	r3, r5, r3
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002466:	4629      	mov	r1, r5
 8002468:	028b      	lsls	r3, r1, #10
 800246a:	4621      	mov	r1, r4
 800246c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002470:	4621      	mov	r1, r4
 8002472:	028a      	lsls	r2, r1, #10
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	2200      	movs	r2, #0
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	61fa      	str	r2, [r7, #28]
 8002480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002484:	f7fd ff04 	bl	8000290 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4613      	mov	r3, r2
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3750      	adds	r7, #80	; 0x50
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	080066e0 	.word	0x080066e0

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002510:	f7ff ffdc 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	080066e0 	.word	0x080066e0

08002534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e042      	b.n	80025cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fb74 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2224      	movs	r2, #36	; 0x24
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f973 	bl	8002864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800258c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800259c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d175      	bne.n	80026e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_UART_Transmit+0x2c>
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e06e      	b.n	80026e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002612:	f7fe fc91 	bl	8000f38 <HAL_GetTick>
 8002616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262c:	d108      	bne.n	8002640 <HAL_UART_Transmit+0x6c>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	e003      	b.n	8002648 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002648:	e02e      	b.n	80026a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2200      	movs	r2, #0
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f848 	bl	80026ea <UART_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e03a      	b.n	80026e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	3302      	adds	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	e007      	b.n	800269a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3301      	adds	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1cb      	bne.n	800264a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2140      	movs	r1, #64	; 0x40
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f814 	bl	80026ea <UART_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e006      	b.n	80026e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fa:	e03b      	b.n	8002774 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d037      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002704:	f7fe fc18 	bl	8000f38 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	6a3a      	ldr	r2, [r7, #32]
 8002710:	429a      	cmp	r2, r3
 8002712:	d302      	bcc.n	800271a <UART_WaitOnFlagUntilTimeout+0x30>
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e03a      	b.n	8002794 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d023      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x8a>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d020      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d01d      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d116      	bne.n	8002774 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f81d 	bl	800279c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2208      	movs	r2, #8
 8002766:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e00f      	b.n	8002794 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4013      	ands	r3, r2
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	429a      	cmp	r2, r3
 8002790:	d0b4      	beq.n	80026fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800279c:	b480      	push	{r7}
 800279e:	b095      	sub	sp, #84	; 0x54
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ae:	e853 3f00 	ldrex	r3, [r3]
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027c4:	643a      	str	r2, [r7, #64]	; 0x40
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027cc:	e841 2300 	strex	r3, r2, [r1]
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e5      	bne.n	80027a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3314      	adds	r3, #20
 80027f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e5      	bne.n	80027d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	2b01      	cmp	r3, #1
 8002812:	d119      	bne.n	8002848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	e853 3f00 	ldrex	r3, [r3]
 8002822:	60bb      	str	r3, [r7, #8]
   return(result);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f023 0310 	bic.w	r3, r3, #16
 800282a:	647b      	str	r3, [r7, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002834:	61ba      	str	r2, [r7, #24]
 8002836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6979      	ldr	r1, [r7, #20]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	613b      	str	r3, [r7, #16]
   return(result);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e5      	bne.n	8002814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002856:	bf00      	nop
 8002858:	3754      	adds	r7, #84	; 0x54
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b0c0      	sub	sp, #256	; 0x100
 800286a:	af00      	add	r7, sp, #0
 800286c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	68d9      	ldr	r1, [r3, #12]
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	ea40 0301 	orr.w	r3, r0, r1
 800288c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028bc:	f021 010c 	bic.w	r1, r1, #12
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028ca:	430b      	orrs	r3, r1
 80028cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028de:	6999      	ldr	r1, [r3, #24]
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	ea40 0301 	orr.w	r3, r0, r1
 80028ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b8f      	ldr	r3, [pc, #572]	; (8002b30 <UART_SetConfig+0x2cc>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d005      	beq.n	8002904 <UART_SetConfig+0xa0>
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b8d      	ldr	r3, [pc, #564]	; (8002b34 <UART_SetConfig+0x2d0>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d104      	bne.n	800290e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002904:	f7ff fe02 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8002908:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800290c:	e003      	b.n	8002916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800290e:	f7ff fde9 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8002912:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002920:	f040 810c 	bne.w	8002b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002928:	2200      	movs	r2, #0
 800292a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800292e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002936:	4622      	mov	r2, r4
 8002938:	462b      	mov	r3, r5
 800293a:	1891      	adds	r1, r2, r2
 800293c:	65b9      	str	r1, [r7, #88]	; 0x58
 800293e:	415b      	adcs	r3, r3
 8002940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002946:	4621      	mov	r1, r4
 8002948:	eb12 0801 	adds.w	r8, r2, r1
 800294c:	4629      	mov	r1, r5
 800294e:	eb43 0901 	adc.w	r9, r3, r1
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800295e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002966:	4690      	mov	r8, r2
 8002968:	4699      	mov	r9, r3
 800296a:	4623      	mov	r3, r4
 800296c:	eb18 0303 	adds.w	r3, r8, r3
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002974:	462b      	mov	r3, r5
 8002976:	eb49 0303 	adc.w	r3, r9, r3
 800297a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800298a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800298e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002992:	460b      	mov	r3, r1
 8002994:	18db      	adds	r3, r3, r3
 8002996:	653b      	str	r3, [r7, #80]	; 0x50
 8002998:	4613      	mov	r3, r2
 800299a:	eb42 0303 	adc.w	r3, r2, r3
 800299e:	657b      	str	r3, [r7, #84]	; 0x54
 80029a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029a8:	f7fd fc72 	bl	8000290 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <UART_SetConfig+0x2d4>)
 80029b2:	fba3 2302 	umull	r2, r3, r3, r2
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	011c      	lsls	r4, r3, #4
 80029ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029be:	2200      	movs	r2, #0
 80029c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029cc:	4642      	mov	r2, r8
 80029ce:	464b      	mov	r3, r9
 80029d0:	1891      	adds	r1, r2, r2
 80029d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80029d4:	415b      	adcs	r3, r3
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029dc:	4641      	mov	r1, r8
 80029de:	eb12 0a01 	adds.w	sl, r2, r1
 80029e2:	4649      	mov	r1, r9
 80029e4:	eb43 0b01 	adc.w	fp, r3, r1
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fc:	4692      	mov	sl, r2
 80029fe:	469b      	mov	fp, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	eb1a 0303 	adds.w	r3, sl, r3
 8002a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	18db      	adds	r3, r3, r3
 8002a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a2e:	4613      	mov	r3, r2
 8002a30:	eb42 0303 	adc.w	r3, r2, r3
 8002a34:	647b      	str	r3, [r7, #68]	; 0x44
 8002a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a3e:	f7fd fc27 	bl	8000290 <__aeabi_uldivmod>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <UART_SetConfig+0x2d4>)
 8002a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2264      	movs	r2, #100	; 0x64
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	1acb      	subs	r3, r1, r3
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <UART_SetConfig+0x2d4>)
 8002a60:	fba3 2302 	umull	r2, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a6c:	441c      	add	r4, r3
 8002a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a80:	4642      	mov	r2, r8
 8002a82:	464b      	mov	r3, r9
 8002a84:	1891      	adds	r1, r2, r2
 8002a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a88:	415b      	adcs	r3, r3
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a90:	4641      	mov	r1, r8
 8002a92:	1851      	adds	r1, r2, r1
 8002a94:	6339      	str	r1, [r7, #48]	; 0x30
 8002a96:	4649      	mov	r1, r9
 8002a98:	414b      	adcs	r3, r1
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002aa8:	4659      	mov	r1, fp
 8002aaa:	00cb      	lsls	r3, r1, #3
 8002aac:	4651      	mov	r1, sl
 8002aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab2:	4651      	mov	r1, sl
 8002ab4:	00ca      	lsls	r2, r1, #3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	4642      	mov	r2, r8
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	460a      	mov	r2, r1
 8002ac8:	eb42 0303 	adc.w	r3, r2, r3
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002adc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	18db      	adds	r3, r3, r3
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aea:	4613      	mov	r3, r2
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002afa:	f7fd fbc9 	bl	8000290 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <UART_SetConfig+0x2d4>)
 8002b04:	fba3 1302 	umull	r1, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	2164      	movs	r1, #100	; 0x64
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	3332      	adds	r3, #50	; 0x32
 8002b16:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <UART_SetConfig+0x2d4>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	f003 0207 	and.w	r2, r3, #7
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4422      	add	r2, r4
 8002b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b2c:	e106      	b.n	8002d3c <UART_SetConfig+0x4d8>
 8002b2e:	bf00      	nop
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b4e:	4642      	mov	r2, r8
 8002b50:	464b      	mov	r3, r9
 8002b52:	1891      	adds	r1, r2, r2
 8002b54:	6239      	str	r1, [r7, #32]
 8002b56:	415b      	adcs	r3, r3
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b5e:	4641      	mov	r1, r8
 8002b60:	1854      	adds	r4, r2, r1
 8002b62:	4649      	mov	r1, r9
 8002b64:	eb43 0501 	adc.w	r5, r3, r1
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	00eb      	lsls	r3, r5, #3
 8002b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b76:	00e2      	lsls	r2, r4, #3
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4643      	mov	r3, r8
 8002b7e:	18e3      	adds	r3, r4, r3
 8002b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b84:	464b      	mov	r3, r9
 8002b86:	eb45 0303 	adc.w	r3, r5, r3
 8002b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002baa:	4629      	mov	r1, r5
 8002bac:	008b      	lsls	r3, r1, #2
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	008a      	lsls	r2, r1, #2
 8002bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bbc:	f7fd fb68 	bl	8000290 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <UART_SetConfig+0x4e4>)
 8002bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	011c      	lsls	r4, r3, #4
 8002bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002be0:	4642      	mov	r2, r8
 8002be2:	464b      	mov	r3, r9
 8002be4:	1891      	adds	r1, r2, r2
 8002be6:	61b9      	str	r1, [r7, #24]
 8002be8:	415b      	adcs	r3, r3
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	1851      	adds	r1, r2, r1
 8002bf4:	6139      	str	r1, [r7, #16]
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	414b      	adcs	r3, r1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c08:	4659      	mov	r1, fp
 8002c0a:	00cb      	lsls	r3, r1, #3
 8002c0c:	4651      	mov	r1, sl
 8002c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c12:	4651      	mov	r1, sl
 8002c14:	00ca      	lsls	r2, r1, #3
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c24:	464b      	mov	r3, r9
 8002c26:	460a      	mov	r2, r1
 8002c28:	eb42 0303 	adc.w	r3, r2, r3
 8002c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c48:	4649      	mov	r1, r9
 8002c4a:	008b      	lsls	r3, r1, #2
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c52:	4641      	mov	r1, r8
 8002c54:	008a      	lsls	r2, r1, #2
 8002c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c5a:	f7fd fb19 	bl	8000290 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <UART_SetConfig+0x4e4>)
 8002c66:	fba3 2301 	umull	r2, r3, r3, r1
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2264      	movs	r2, #100	; 0x64
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	1acb      	subs	r3, r1, r3
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	3332      	adds	r3, #50	; 0x32
 8002c78:	4a33      	ldr	r2, [pc, #204]	; (8002d48 <UART_SetConfig+0x4e4>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c84:	441c      	add	r4, r3
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	673b      	str	r3, [r7, #112]	; 0x70
 8002c8e:	677a      	str	r2, [r7, #116]	; 0x74
 8002c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c94:	4642      	mov	r2, r8
 8002c96:	464b      	mov	r3, r9
 8002c98:	1891      	adds	r1, r2, r2
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	415b      	adcs	r3, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	1851      	adds	r1, r2, r1
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	4649      	mov	r1, r9
 8002cac:	414b      	adcs	r3, r1
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	00cb      	lsls	r3, r1, #3
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	00ca      	lsls	r2, r1, #3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	189b      	adds	r3, r3, r2
 8002cd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	460a      	mov	r2, r1
 8002cda:	eb42 0303 	adc.w	r3, r2, r3
 8002cde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8002cea:	667a      	str	r2, [r7, #100]	; 0x64
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	008b      	lsls	r3, r1, #2
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d02:	4641      	mov	r1, r8
 8002d04:	008a      	lsls	r2, r1, #2
 8002d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d0a:	f7fd fac1 	bl	8000290 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <UART_SetConfig+0x4e4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <UART_SetConfig+0x4e4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d42:	46bd      	mov	sp, r7
 8002d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <__NVIC_SetPriority>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002da4:	2100      	movs	r1, #0
 8002da6:	f06f 0004 	mvn.w	r0, #4
 8002daa:	f7ff ffcf 	bl	8002d4c <__NVIC_SetPriority>
#endif
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dba:	f3ef 8305 	mrs	r3, IPSR
 8002dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8002dc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002dc6:	f06f 0305 	mvn.w	r3, #5
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	e00c      	b.n	8002de8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <osKernelInitialize+0x44>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <osKernelInitialize+0x44>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	e002      	b.n	8002de8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002de8:	687b      	ldr	r3, [r7, #4]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	2000017c 	.word	0x2000017c

08002dfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e02:	f3ef 8305 	mrs	r3, IPSR
 8002e06:	603b      	str	r3, [r7, #0]
  return(result);
 8002e08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002e0e:	f06f 0305 	mvn.w	r3, #5
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	e010      	b.n	8002e38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <osKernelStart+0x48>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d109      	bne.n	8002e32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e1e:	f7ff ffbf 	bl	8002da0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <osKernelStart+0x48>)
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e28:	f001 fa50 	bl	80042cc <vTaskStartScheduler>
      stat = osOK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	e002      	b.n	8002e38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e38:	687b      	ldr	r3, [r7, #4]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	2000017c 	.word	0x2000017c

08002e48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e58:	f3ef 8305 	mrs	r3, IPSR
 8002e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d17e      	bne.n	8002f62 <osThreadNew+0x11a>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d07b      	beq.n	8002f62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002e6e:	2318      	movs	r3, #24
 8002e70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d045      	beq.n	8002f0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <osThreadNew+0x48>
        name = attr->name;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <osThreadNew+0x6e>
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b38      	cmp	r3, #56	; 0x38
 8002ea8:	d805      	bhi.n	8002eb6 <osThreadNew+0x6e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <osThreadNew+0x72>
        return (NULL);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e054      	b.n	8002f64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <osThreadNew+0xa8>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b5b      	cmp	r3, #91	; 0x5b
 8002ed8:	d90a      	bls.n	8002ef0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <osThreadNew+0xa8>
        mem = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e010      	b.n	8002f12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <osThreadNew+0xca>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d108      	bne.n	8002f12 <osThreadNew+0xca>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d104      	bne.n	8002f12 <osThreadNew+0xca>
          mem = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	e001      	b.n	8002f12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d110      	bne.n	8002f3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f20:	9202      	str	r2, [sp, #8]
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a3a      	ldr	r2, [r7, #32]
 8002f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fff6 	bl	8003f20 <xTaskCreateStatic>
 8002f34:	4603      	mov	r3, r0
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e013      	b.n	8002f62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d110      	bne.n	8002f62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f001 f841 	bl	8003fda <xTaskCreate>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <osThreadNew+0x11a>
            hTask = NULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f62:	693b      	ldr	r3, [r7, #16]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f74:	f3ef 8305 	mrs	r3, IPSR
 8002f78:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <osDelay+0x1c>
    stat = osErrorISR;
 8002f80:	f06f 0305 	mvn.w	r3, #5
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e007      	b.n	8002f98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f001 f966 	bl	8004264 <vTaskDelay>
    }
  }

  return (stat);
 8002f98:	68fb      	ldr	r3, [r7, #12]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b08a      	sub	sp, #40	; 0x28
 8002fa6:	af02      	add	r7, sp, #8
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fb2:	f3ef 8305 	mrs	r3, IPSR
 8002fb6:	613b      	str	r3, [r7, #16]
  return(result);
 8002fb8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d15f      	bne.n	800307e <osMessageQueueNew+0xdc>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d05c      	beq.n	800307e <osMessageQueueNew+0xdc>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d059      	beq.n	800307e <osMessageQueueNew+0xdc>
    mem = -1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d029      	beq.n	800302a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <osMessageQueueNew+0x62>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b4f      	cmp	r3, #79	; 0x4f
 8002fe4:	d90e      	bls.n	8003004 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <osMessageQueueNew+0x62>
        mem = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	e014      	b.n	800302e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d110      	bne.n	800302e <osMessageQueueNew+0x8c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10c      	bne.n	800302e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003018:	2b00      	cmp	r3, #0
 800301a:	d108      	bne.n	800302e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <osMessageQueueNew+0x8c>
          mem = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	e001      	b.n	800302e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10b      	bne.n	800304c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2100      	movs	r1, #0
 800303e:	9100      	str	r1, [sp, #0]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fa2e 	bl	80034a4 <xQueueGenericCreateStatic>
 8003048:	61f8      	str	r0, [r7, #28]
 800304a:	e008      	b.n	800305e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003052:	2200      	movs	r2, #0
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fa9c 	bl	8003594 <xQueueGenericCreate>
 800305c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00c      	beq.n	800307e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <osMessageQueueNew+0xd0>
        name = attr->name;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e001      	b.n	8003076 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003076:	6979      	ldr	r1, [r7, #20]
 8003078:	69f8      	ldr	r0, [r7, #28]
 800307a:	f000 fef3 	bl	8003e64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800307e:	69fb      	ldr	r3, [r7, #28]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a0:	f3ef 8305 	mrs	r3, IPSR
 80030a4:	617b      	str	r3, [r7, #20]
  return(result);
 80030a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d028      	beq.n	80030fe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <osMessageQueuePut+0x36>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <osMessageQueuePut+0x36>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80030be:	f06f 0303 	mvn.w	r3, #3
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	e038      	b.n	8003138 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80030ca:	f107 0210 	add.w	r2, r7, #16
 80030ce:	2300      	movs	r3, #0
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	69b8      	ldr	r0, [r7, #24]
 80030d4:	f000 fbba 	bl	800384c <xQueueGenericSendFromISR>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d003      	beq.n	80030e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80030de:	f06f 0302 	mvn.w	r3, #2
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e028      	b.n	8003138 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d025      	beq.n	8003138 <osMessageQueuePut+0xb0>
 80030ec:	4b15      	ldr	r3, [pc, #84]	; (8003144 <osMessageQueuePut+0xbc>)
 80030ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	e01c      	b.n	8003138 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <osMessageQueuePut+0x82>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800310a:	f06f 0303 	mvn.w	r3, #3
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	e012      	b.n	8003138 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003112:	2300      	movs	r3, #0
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	69b8      	ldr	r0, [r7, #24]
 800311a:	f000 fa99 	bl	8003650 <xQueueGenericSend>
 800311e:	4603      	mov	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d009      	beq.n	8003138 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800312a:	f06f 0301 	mvn.w	r3, #1
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	e002      	b.n	8003138 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003132:	f06f 0302 	mvn.w	r3, #2
 8003136:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003138:	69fb      	ldr	r3, [r7, #28]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800315e:	f3ef 8305 	mrs	r3, IPSR
 8003162:	617b      	str	r3, [r7, #20]
  return(result);
 8003164:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003166:	2b00      	cmp	r3, #0
 8003168:	d028      	beq.n	80031bc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <osMessageQueueGet+0x34>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <osMessageQueueGet+0x34>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800317c:	f06f 0303 	mvn.w	r3, #3
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e037      	b.n	80031f4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	461a      	mov	r2, r3
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	69b8      	ldr	r0, [r7, #24]
 8003192:	f000 fcd7 	bl	8003b44 <xQueueReceiveFromISR>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d003      	beq.n	80031a4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800319c:	f06f 0302 	mvn.w	r3, #2
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	e027      	b.n	80031f4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d024      	beq.n	80031f4 <osMessageQueueGet+0xac>
 80031aa:	4b15      	ldr	r3, [pc, #84]	; (8003200 <osMessageQueueGet+0xb8>)
 80031ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	e01b      	b.n	80031f4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <osMessageQueueGet+0x80>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80031c8:	f06f 0303 	mvn.w	r3, #3
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e011      	b.n	80031f4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	69b8      	ldr	r0, [r7, #24]
 80031d6:	f000 fbd5 	bl	8003984 <xQueueReceive>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d009      	beq.n	80031f4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80031e6:	f06f 0301 	mvn.w	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	e002      	b.n	80031f4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80031ee:	f06f 0302 	mvn.w	r3, #2
 80031f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80031f4:	69fb      	ldr	r3, [r7, #28]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	e000ed04 	.word	0xe000ed04

08003204 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a07      	ldr	r2, [pc, #28]	; (8003230 <vApplicationGetIdleTaskMemory+0x2c>)
 8003214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4a06      	ldr	r2, [pc, #24]	; (8003234 <vApplicationGetIdleTaskMemory+0x30>)
 800321a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	601a      	str	r2, [r3, #0]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000180 	.word	0x20000180
 8003234:	200001dc 	.word	0x200001dc

08003238 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <vApplicationGetTimerTaskMemory+0x2c>)
 8003248:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4a06      	ldr	r2, [pc, #24]	; (8003268 <vApplicationGetTimerTaskMemory+0x30>)
 800324e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003256:	601a      	str	r2, [r3, #0]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	200003dc 	.word	0x200003dc
 8003268:	20000438 	.word	0x20000438

0800326c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f103 0208 	add.w	r2, r3, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f103 0208 	add.w	r2, r3, #8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f103 0208 	add.w	r2, r3, #8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d103      	bne.n	800332e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e00c      	b.n	8003348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3308      	adds	r3, #8
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e002      	b.n	800333c <vListInsert+0x2e>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	d2f6      	bcs.n	8003336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6892      	ldr	r2, [r2, #8]
 8003396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6852      	ldr	r2, [r2, #4]
 80033a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d103      	bne.n	80033b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033fa:	bf00      	nop
 80033fc:	e7fe      	b.n	80033fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033fe:	f002 f909 	bl	8005614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	441a      	add	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	3b01      	subs	r3, #1
 8003430:	68f9      	ldr	r1, [r7, #12]
 8003432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	441a      	add	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	22ff      	movs	r2, #255	; 0xff
 8003442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	22ff      	movs	r2, #255	; 0xff
 800344a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d114      	bne.n	800347e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01a      	beq.n	8003492 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3310      	adds	r3, #16
 8003460:	4618      	mov	r0, r3
 8003462:	f001 f9bd 	bl	80047e0 <xTaskRemoveFromEventList>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <xQueueGenericReset+0xcc>)
 800346e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	e009      	b.n	8003492 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3310      	adds	r3, #16
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fef2 	bl	800326c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3324      	adds	r3, #36	; 0x24
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff feed 	bl	800326c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003492:	f002 f8ef 	bl	8005674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003496:	2301      	movs	r3, #1
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08e      	sub	sp, #56	; 0x38
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <xQueueGenericCreateStatic+0x52>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <xQueueGenericCreateStatic+0x56>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <xQueueGenericCreateStatic+0x58>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	623b      	str	r3, [r7, #32]
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d102      	bne.n	8003522 <xQueueGenericCreateStatic+0x7e>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <xQueueGenericCreateStatic+0x82>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <xQueueGenericCreateStatic+0x84>
 8003526:	2300      	movs	r3, #0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	61fb      	str	r3, [r7, #28]
}
 800353e:	bf00      	nop
 8003540:	e7fe      	b.n	8003540 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003542:	2350      	movs	r3, #80	; 0x50
 8003544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b50      	cmp	r3, #80	; 0x50
 800354a:	d00a      	beq.n	8003562 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	61bb      	str	r3, [r7, #24]
}
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003562:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003576:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f83f 	bl	8003608 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800358c:	4618      	mov	r0, r3
 800358e:	3730      	adds	r7, #48	; 0x30
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xQueueGenericCreate+0x2a>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	613b      	str	r3, [r7, #16]
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3350      	adds	r3, #80	; 0x50
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 f943 	bl	8005858 <pvPortMalloc>
 80035d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d011      	beq.n	80035fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3350      	adds	r3, #80	; 0x50
 80035e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035ec:	79fa      	ldrb	r2, [r7, #7]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	4613      	mov	r3, r2
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f805 	bl	8003608 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d103      	bne.n	8003624 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e002      	b.n	800362a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003636:	2101      	movs	r1, #1
 8003638:	69b8      	ldr	r0, [r7, #24]
 800363a:	f7ff fecb 	bl	80033d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <xQueueGenericSend+0x32>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800367e:	bf00      	nop
 8003680:	e7fe      	b.n	8003680 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <xQueueGenericSend+0x40>
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <xQueueGenericSend+0x44>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <xQueueGenericSend+0x46>
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <xQueueGenericSend+0x60>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d103      	bne.n	80036be <xQueueGenericSend+0x6e>
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <xQueueGenericSend+0x72>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <xQueueGenericSend+0x74>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xQueueGenericSend+0x8e>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	623b      	str	r3, [r7, #32]
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036de:	f001 fa3d 	bl	8004b5c <xTaskGetSchedulerState>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <xQueueGenericSend+0x9e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <xQueueGenericSend+0xa2>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <xQueueGenericSend+0xa4>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xQueueGenericSend+0xbe>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	61fb      	str	r3, [r7, #28]
}
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800370e:	f001 ff81 	bl	8005614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <xQueueGenericSend+0xd4>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d129      	bne.n	8003778 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372a:	f000 fa8b 	bl	8003c44 <prvCopyDataToQueue>
 800372e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	3324      	adds	r3, #36	; 0x24
 800373c:	4618      	mov	r0, r3
 800373e:	f001 f84f 	bl	80047e0 <xTaskRemoveFromEventList>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003748:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <xQueueGenericSend+0x1f8>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	e00a      	b.n	8003770 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <xQueueGenericSend+0x1f8>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003770:	f001 ff80 	bl	8005674 <vPortExitCritical>
				return pdPASS;
 8003774:	2301      	movs	r3, #1
 8003776:	e063      	b.n	8003840 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800377e:	f001 ff79 	bl	8005674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003782:	2300      	movs	r3, #0
 8003784:	e05c      	b.n	8003840 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4618      	mov	r0, r3
 8003792:	f001 f889 	bl	80048a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003796:	2301      	movs	r3, #1
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800379a:	f001 ff6b 	bl	8005674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800379e:	f000 fdfb 	bl	8004398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037a2:	f001 ff37 	bl	8005614 <vPortEnterCritical>
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d103      	bne.n	80037bc <xQueueGenericSend+0x16c>
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d103      	bne.n	80037d2 <xQueueGenericSend+0x182>
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d2:	f001 ff4f 	bl	8005674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d6:	1d3a      	adds	r2, r7, #4
 80037d8:	f107 0314 	add.w	r3, r7, #20
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 f878 	bl	80048d4 <xTaskCheckForTimeOut>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d124      	bne.n	8003834 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ec:	f000 fb22 	bl	8003e34 <prvIsQueueFull>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	3310      	adds	r3, #16
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 ff9e 	bl	8004740 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003806:	f000 faad 	bl	8003d64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800380a:	f000 fdd3 	bl	80043b4 <xTaskResumeAll>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f af7c 	bne.w	800370e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <xQueueGenericSend+0x1f8>)
 8003818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	e772      	b.n	800370e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800382a:	f000 fa9b 	bl	8003d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800382e:	f000 fdc1 	bl	80043b4 <xTaskResumeAll>
 8003832:	e76c      	b.n	800370e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003836:	f000 fa95 	bl	8003d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800383a:	f000 fdbb 	bl	80043b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800383e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003840:	4618      	mov	r0, r3
 8003842:	3738      	adds	r7, #56	; 0x38
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b090      	sub	sp, #64	; 0x40
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d103      	bne.n	8003888 <xQueueGenericSendFromISR+0x3c>
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <xQueueGenericSendFromISR+0x40>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <xQueueGenericSendFromISR+0x42>
 800388c:	2300      	movs	r3, #0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038a4:	bf00      	nop
 80038a6:	e7fe      	b.n	80038a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d103      	bne.n	80038b6 <xQueueGenericSendFromISR+0x6a>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <xQueueGenericSendFromISR+0x6e>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <xQueueGenericSendFromISR+0x70>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	623b      	str	r3, [r7, #32]
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038d6:	f001 ff7f 	bl	80057d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038da:	f3ef 8211 	mrs	r2, BASEPRI
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	61fa      	str	r2, [r7, #28]
 80038f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <xQueueGenericSendFromISR+0xbc>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d12f      	bne.n	8003968 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800390e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800391e:	f000 f991 	bl	8003c44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003922:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d112      	bne.n	8003952 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d016      	beq.n	8003962 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	3324      	adds	r3, #36	; 0x24
 8003938:	4618      	mov	r0, r3
 800393a:	f000 ff51 	bl	80047e0 <xTaskRemoveFromEventList>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e007      	b.n	8003962 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003956:	3301      	adds	r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	b25a      	sxtb	r2, r3
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003962:	2301      	movs	r3, #1
 8003964:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003966:	e001      	b.n	800396c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003968:	2300      	movs	r3, #0
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003976:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800397a:	4618      	mov	r0, r3
 800397c:	3740      	adds	r7, #64	; 0x40
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08c      	sub	sp, #48	; 0x30
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003990:	2300      	movs	r3, #0
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <xQueueReceive+0x30>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	623b      	str	r3, [r7, #32]
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d103      	bne.n	80039c2 <xQueueReceive+0x3e>
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <xQueueReceive+0x42>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <xQueueReceive+0x44>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xQueueReceive+0x5e>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61fb      	str	r3, [r7, #28]
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039e2:	f001 f8bb 	bl	8004b5c <xTaskGetSchedulerState>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <xQueueReceive+0x6e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueReceive+0x72>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueReceive+0x74>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueReceive+0x8e>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61bb      	str	r3, [r7, #24]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a12:	f001 fdff 	bl	8005614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01f      	beq.n	8003a62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a26:	f000 f977 	bl	8003d18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1e5a      	subs	r2, r3, #1
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00f      	beq.n	8003a5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fece 	bl	80047e0 <xTaskRemoveFromEventList>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <xQueueReceive+0x1bc>)
 8003a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a5a:	f001 fe0b 	bl	8005674 <vPortExitCritical>
				return pdPASS;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e069      	b.n	8003b36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a68:	f001 fe04 	bl	8005674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e062      	b.n	8003b36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 ff14 	bl	80048a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a80:	2301      	movs	r3, #1
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a84:	f001 fdf6 	bl	8005674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a88:	f000 fc86 	bl	8004398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a8c:	f001 fdc2 	bl	8005614 <vPortEnterCritical>
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a96:	b25b      	sxtb	r3, r3
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d103      	bne.n	8003aa6 <xQueueReceive+0x122>
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aac:	b25b      	sxtb	r3, r3
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d103      	bne.n	8003abc <xQueueReceive+0x138>
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003abc:	f001 fdda 	bl	8005674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ac0:	1d3a      	adds	r2, r7, #4
 8003ac2:	f107 0310 	add.w	r3, r7, #16
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 ff03 	bl	80048d4 <xTaskCheckForTimeOut>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d123      	bne.n	8003b1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad6:	f000 f997 	bl	8003e08 <prvIsQueueEmpty>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	3324      	adds	r3, #36	; 0x24
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fe29 	bl	8004740 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af0:	f000 f938 	bl	8003d64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003af4:	f000 fc5e 	bl	80043b4 <xTaskResumeAll>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d189      	bne.n	8003a12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <xQueueReceive+0x1bc>)
 8003b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	e780      	b.n	8003a12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b12:	f000 f927 	bl	8003d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b16:	f000 fc4d 	bl	80043b4 <xTaskResumeAll>
 8003b1a:	e77a      	b.n	8003a12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b1e:	f000 f921 	bl	8003d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b22:	f000 fc47 	bl	80043b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b28:	f000 f96e 	bl	8003e08 <prvIsQueueEmpty>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f43f af6f 	beq.w	8003a12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3730      	adds	r7, #48	; 0x30
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08e      	sub	sp, #56	; 0x38
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	623b      	str	r3, [r7, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <xQueueReceiveFromISR+0x3a>
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <xQueueReceiveFromISR+0x3e>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <xQueueReceiveFromISR+0x40>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	61fb      	str	r3, [r7, #28]
}
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b9e:	f001 fe1b 	bl	80057d8 <vPortValidateInterruptPriority>
	__asm volatile
 8003ba2:	f3ef 8211 	mrs	r2, BASEPRI
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	61ba      	str	r2, [r7, #24]
 8003bb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003bba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d02f      	beq.n	8003c2a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd8:	f000 f89e 	bl	8003d18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	1e5a      	subs	r2, r3, #1
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003be4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d112      	bne.n	8003c14 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	3310      	adds	r3, #16
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fdf0 	bl	80047e0 <xTaskRemoveFromEventList>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e007      	b.n	8003c24 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c18:	3301      	adds	r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	b25a      	sxtb	r2, r3
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003c24:	2301      	movs	r3, #1
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
 8003c28:	e001      	b.n	8003c2e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f383 8811 	msr	BASEPRI, r3
}
 8003c38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3738      	adds	r7, #56	; 0x38
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10d      	bne.n	8003c7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d14d      	bne.n	8003d06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 ff92 	bl	8004b98 <xTaskPriorityDisinherit>
 8003c74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	e043      	b.n	8003d06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d119      	bne.n	8003cb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6858      	ldr	r0, [r3, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	f002 f8e4 	bl	8005e5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	441a      	add	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d32b      	bcc.n	8003d06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e026      	b.n	8003d06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68d8      	ldr	r0, [r3, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	f002 f8ca 	bl	8005e5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	425b      	negs	r3, r3
 8003cd2:	441a      	add	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d207      	bcs.n	8003cf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	425b      	negs	r3, r3
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d105      	bne.n	8003d06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d0e:	697b      	ldr	r3, [r7, #20]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d018      	beq.n	8003d5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	441a      	add	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d303      	bcc.n	8003d4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68d9      	ldr	r1, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	461a      	mov	r2, r3
 8003d56:	6838      	ldr	r0, [r7, #0]
 8003d58:	f002 f880 	bl	8005e5c <memcpy>
	}
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d6c:	f001 fc52 	bl	8005614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d78:	e011      	b.n	8003d9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d012      	beq.n	8003da8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3324      	adds	r3, #36	; 0x24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fd2a 	bl	80047e0 <xTaskRemoveFromEventList>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d92:	f000 fe01 	bl	8004998 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dce9      	bgt.n	8003d7a <prvUnlockQueue+0x16>
 8003da6:	e000      	b.n	8003daa <prvUnlockQueue+0x46>
					break;
 8003da8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	22ff      	movs	r2, #255	; 0xff
 8003dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003db2:	f001 fc5f 	bl	8005674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003db6:	f001 fc2d 	bl	8005614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dc2:	e011      	b.n	8003de8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3310      	adds	r3, #16
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fd05 	bl	80047e0 <xTaskRemoveFromEventList>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ddc:	f000 fddc 	bl	8004998 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003de0:	7bbb      	ldrb	r3, [r7, #14]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	dce9      	bgt.n	8003dc4 <prvUnlockQueue+0x60>
 8003df0:	e000      	b.n	8003df4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003df2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003dfc:	f001 fc3a 	bl	8005674 <vPortExitCritical>
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e10:	f001 fc00 	bl	8005614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e001      	b.n	8003e26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e26:	f001 fc25 	bl	8005674 <vPortExitCritical>

	return xReturn;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e3c:	f001 fbea 	bl	8005614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d102      	bne.n	8003e52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e001      	b.n	8003e56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e56:	f001 fc0d 	bl	8005674 <vPortExitCritical>

	return xReturn;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e014      	b.n	8003e9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e74:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <vQueueAddToRegistry+0x50>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e80:	490c      	ldr	r1, [pc, #48]	; (8003eb4 <vQueueAddToRegistry+0x50>)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <vQueueAddToRegistry+0x50>)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e96:	e006      	b.n	8003ea6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b07      	cmp	r3, #7
 8003ea2:	d9e7      	bls.n	8003e74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000838 	.word	0x20000838

08003eb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ec8:	f001 fba4 	bl	8005614 <vPortEnterCritical>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ed2:	b25b      	sxtb	r3, r3
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d103      	bne.n	8003ee2 <vQueueWaitForMessageRestricted+0x2a>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d103      	bne.n	8003ef8 <vQueueWaitForMessageRestricted+0x40>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef8:	f001 fbbc 	bl	8005674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3324      	adds	r3, #36	; 0x24
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fc3b 	bl	8004788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f7ff ff26 	bl	8003d64 <prvUnlockQueue>
	}
 8003f18:	bf00      	nop
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08e      	sub	sp, #56	; 0x38
 8003f24:	af04      	add	r7, sp, #16
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	623b      	str	r3, [r7, #32]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	61fb      	str	r3, [r7, #28]
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f66:	235c      	movs	r3, #92	; 0x5c
 8003f68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b5c      	cmp	r3, #92	; 0x5c
 8003f6e:	d00a      	beq.n	8003f86 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	61bb      	str	r3, [r7, #24]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01e      	beq.n	8003fcc <xTaskCreateStatic+0xac>
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9303      	str	r3, [sp, #12]
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	9302      	str	r3, [sp, #8]
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f850 	bl	8004064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fc6:	f000 f8dd 	bl	8004184 <prvAddNewTaskToReadyList>
 8003fca:	e001      	b.n	8003fd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fd0:	697b      	ldr	r3, [r7, #20]
	}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3728      	adds	r7, #40	; 0x28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b08c      	sub	sp, #48	; 0x30
 8003fde:	af04      	add	r7, sp, #16
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fc32 	bl	8005858 <pvPortMalloc>
 8003ff4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00e      	beq.n	800401a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ffc:	205c      	movs	r0, #92	; 0x5c
 8003ffe:	f001 fc2b 	bl	8005858 <pvPortMalloc>
 8004002:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
 8004010:	e005      	b.n	800401e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f001 fcec 	bl	80059f0 <vPortFree>
 8004018:	e001      	b.n	800401e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d017      	beq.n	8004054 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800402c:	88fa      	ldrh	r2, [r7, #6]
 800402e:	2300      	movs	r3, #0
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f80e 	bl	8004064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004048:	69f8      	ldr	r0, [r7, #28]
 800404a:	f000 f89b 	bl	8004184 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800404e:	2301      	movs	r3, #1
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e002      	b.n	800405a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800405a:	69bb      	ldr	r3, [r7, #24]
	}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	461a      	mov	r2, r3
 800407c:	21a5      	movs	r1, #165	; 0xa5
 800407e:	f001 fea9 	bl	8005dd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800408c:	3b01      	subs	r3, #1
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f023 0307 	bic.w	r3, r3, #7
 800409a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	617b      	str	r3, [r7, #20]
}
 80040b8:	bf00      	nop
 80040ba:	e7fe      	b.n	80040ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01f      	beq.n	8004102 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	e012      	b.n	80040ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	7819      	ldrb	r1, [r3, #0]
 80040d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	3334      	adds	r3, #52	; 0x34
 80040d8:	460a      	mov	r2, r1
 80040da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d006      	beq.n	80040f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	2b0f      	cmp	r3, #15
 80040f2:	d9e9      	bls.n	80040c8 <prvInitialiseNewTask+0x64>
 80040f4:	e000      	b.n	80040f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80040f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004100:	e003      	b.n	800410a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	2b37      	cmp	r3, #55	; 0x37
 800410e:	d901      	bls.n	8004114 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004110:	2337      	movs	r3, #55	; 0x37
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800411e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	2200      	movs	r2, #0
 8004124:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff f8be 	bl	80032ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	3318      	adds	r3, #24
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff f8b9 	bl	80032ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	2200      	movs	r2, #0
 8004154:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	68f9      	ldr	r1, [r7, #12]
 8004162:	69b8      	ldr	r0, [r7, #24]
 8004164:	f001 f928 	bl	80053b8 <pxPortInitialiseStack>
 8004168:	4602      	mov	r2, r0
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800417a:	bf00      	nop
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800418c:	f001 fa42 	bl	8005614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004190:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <prvAddNewTaskToReadyList+0xc4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <prvAddNewTaskToReadyList+0xc4>)
 8004198:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800419a:	4b2c      	ldr	r3, [pc, #176]	; (800424c <prvAddNewTaskToReadyList+0xc8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041a2:	4a2a      	ldr	r2, [pc, #168]	; (800424c <prvAddNewTaskToReadyList+0xc8>)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <prvAddNewTaskToReadyList+0xc4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d110      	bne.n	80041d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041b0:	f000 fc16 	bl	80049e0 <prvInitialiseTaskLists>
 80041b4:	e00d      	b.n	80041d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041b6:	4b26      	ldr	r3, [pc, #152]	; (8004250 <prvAddNewTaskToReadyList+0xcc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041be:	4b23      	ldr	r3, [pc, #140]	; (800424c <prvAddNewTaskToReadyList+0xc8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d802      	bhi.n	80041d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041cc:	4a1f      	ldr	r2, [pc, #124]	; (800424c <prvAddNewTaskToReadyList+0xc8>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <prvAddNewTaskToReadyList+0xd0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3301      	adds	r3, #1
 80041d8:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <prvAddNewTaskToReadyList+0xd0>)
 80041da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <prvAddNewTaskToReadyList+0xd0>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <prvAddNewTaskToReadyList+0xd4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d903      	bls.n	80041f8 <prvAddNewTaskToReadyList+0x74>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4a18      	ldr	r2, [pc, #96]	; (8004258 <prvAddNewTaskToReadyList+0xd4>)
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4a15      	ldr	r2, [pc, #84]	; (800425c <prvAddNewTaskToReadyList+0xd8>)
 8004206:	441a      	add	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f7ff f859 	bl	80032c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004214:	f001 fa2e 	bl	8005674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <prvAddNewTaskToReadyList+0xcc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00e      	beq.n	800423e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <prvAddNewTaskToReadyList+0xc8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	429a      	cmp	r2, r3
 800422c:	d207      	bcs.n	800423e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <prvAddNewTaskToReadyList+0xdc>)
 8004230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000d4c 	.word	0x20000d4c
 800424c:	20000878 	.word	0x20000878
 8004250:	20000d58 	.word	0x20000d58
 8004254:	20000d68 	.word	0x20000d68
 8004258:	20000d54 	.word	0x20000d54
 800425c:	2000087c 	.word	0x2000087c
 8004260:	e000ed04 	.word	0xe000ed04

08004264 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d017      	beq.n	80042a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004276:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <vTaskDelay+0x60>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <vTaskDelay+0x30>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	60bb      	str	r3, [r7, #8]
}
 8004290:	bf00      	nop
 8004292:	e7fe      	b.n	8004292 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004294:	f000 f880 	bl	8004398 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004298:	2100      	movs	r1, #0
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fcea 	bl	8004c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042a0:	f000 f888 	bl	80043b4 <xTaskResumeAll>
 80042a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <vTaskDelay+0x64>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000d74 	.word	0x20000d74
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042da:	463a      	mov	r2, r7
 80042dc:	1d39      	adds	r1, r7, #4
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe ff8e 	bl	8003204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	9202      	str	r2, [sp, #8]
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	2300      	movs	r3, #0
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	2300      	movs	r3, #0
 80042f8:	460a      	mov	r2, r1
 80042fa:	4921      	ldr	r1, [pc, #132]	; (8004380 <vTaskStartScheduler+0xb4>)
 80042fc:	4821      	ldr	r0, [pc, #132]	; (8004384 <vTaskStartScheduler+0xb8>)
 80042fe:	f7ff fe0f 	bl	8003f20 <xTaskCreateStatic>
 8004302:	4603      	mov	r3, r0
 8004304:	4a20      	ldr	r2, [pc, #128]	; (8004388 <vTaskStartScheduler+0xbc>)
 8004306:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004308:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <vTaskStartScheduler+0xbc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004310:	2301      	movs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e001      	b.n	800431a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004320:	f000 fcfc 	bl	8004d1c <xTimerCreateTimerTask>
 8004324:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d116      	bne.n	800435a <vTaskStartScheduler+0x8e>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	613b      	str	r3, [r7, #16]
}
 800433e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004340:	4b12      	ldr	r3, [pc, #72]	; (800438c <vTaskStartScheduler+0xc0>)
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <vTaskStartScheduler+0xc4>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <vTaskStartScheduler+0xc8>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004354:	f001 f8bc 	bl	80054d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004358:	e00e      	b.n	8004378 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d10a      	bne.n	8004378 <vTaskStartScheduler+0xac>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60fb      	str	r3, [r7, #12]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <vTaskStartScheduler+0xaa>
}
 8004378:	bf00      	nop
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	080065ec 	.word	0x080065ec
 8004384:	080049b1 	.word	0x080049b1
 8004388:	20000d70 	.word	0x20000d70
 800438c:	20000d6c 	.word	0x20000d6c
 8004390:	20000d58 	.word	0x20000d58
 8004394:	20000d50 	.word	0x20000d50

08004398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <vTaskSuspendAll+0x18>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <vTaskSuspendAll+0x18>)
 80043a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043a6:	bf00      	nop
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000d74 	.word	0x20000d74

080043b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043c2:	4b42      	ldr	r3, [pc, #264]	; (80044cc <xTaskResumeAll+0x118>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043e0:	f001 f918 	bl	8005614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <xTaskResumeAll+0x118>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	4a38      	ldr	r2, [pc, #224]	; (80044cc <xTaskResumeAll+0x118>)
 80043ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ee:	4b37      	ldr	r3, [pc, #220]	; (80044cc <xTaskResumeAll+0x118>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d162      	bne.n	80044bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043f6:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <xTaskResumeAll+0x11c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d05e      	beq.n	80044bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043fe:	e02f      	b.n	8004460 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004400:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <xTaskResumeAll+0x120>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3318      	adds	r3, #24
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe ffb7 	bl	8003380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3304      	adds	r3, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe ffb2 	bl	8003380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <xTaskResumeAll+0x124>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d903      	bls.n	8004430 <xTaskResumeAll+0x7c>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4a2a      	ldr	r2, [pc, #168]	; (80044d8 <xTaskResumeAll+0x124>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4a27      	ldr	r2, [pc, #156]	; (80044dc <xTaskResumeAll+0x128>)
 800443e:	441a      	add	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe ff3d 	bl	80032c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <xTaskResumeAll+0x12c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800445a:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <xTaskResumeAll+0x130>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <xTaskResumeAll+0x120>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1cb      	bne.n	8004400 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800446e:	f000 fb55 	bl	8004b1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <xTaskResumeAll+0x134>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800447e:	f000 f847 	bl	8004510 <xTaskIncrementTick>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <xTaskResumeAll+0x130>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3b01      	subs	r3, #1
 8004492:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f1      	bne.n	800447e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <xTaskResumeAll+0x134>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <xTaskResumeAll+0x130>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <xTaskResumeAll+0x138>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044bc:	f001 f8da 	bl	8005674 <vPortExitCritical>

	return xAlreadyYielded;
 80044c0:	68bb      	ldr	r3, [r7, #8]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000d74 	.word	0x20000d74
 80044d0:	20000d4c 	.word	0x20000d4c
 80044d4:	20000d0c 	.word	0x20000d0c
 80044d8:	20000d54 	.word	0x20000d54
 80044dc:	2000087c 	.word	0x2000087c
 80044e0:	20000878 	.word	0x20000878
 80044e4:	20000d60 	.word	0x20000d60
 80044e8:	20000d5c 	.word	0x20000d5c
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <xTaskGetTickCount+0x1c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044fc:	687b      	ldr	r3, [r7, #4]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000d50 	.word	0x20000d50

08004510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800451a:	4b4f      	ldr	r3, [pc, #316]	; (8004658 <xTaskIncrementTick+0x148>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 808f 	bne.w	8004642 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004524:	4b4d      	ldr	r3, [pc, #308]	; (800465c <xTaskIncrementTick+0x14c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800452c:	4a4b      	ldr	r2, [pc, #300]	; (800465c <xTaskIncrementTick+0x14c>)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d120      	bne.n	800457a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <xTaskIncrementTick+0x150>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <xTaskIncrementTick+0x48>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	603b      	str	r3, [r7, #0]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xTaskIncrementTick+0x46>
 8004558:	4b41      	ldr	r3, [pc, #260]	; (8004660 <xTaskIncrementTick+0x150>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <xTaskIncrementTick+0x154>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <xTaskIncrementTick+0x150>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4a3f      	ldr	r2, [pc, #252]	; (8004664 <xTaskIncrementTick+0x154>)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b3e      	ldr	r3, [pc, #248]	; (8004668 <xTaskIncrementTick+0x158>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	4a3d      	ldr	r2, [pc, #244]	; (8004668 <xTaskIncrementTick+0x158>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	f000 fad1 	bl	8004b1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800457a:	4b3c      	ldr	r3, [pc, #240]	; (800466c <xTaskIncrementTick+0x15c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	429a      	cmp	r2, r3
 8004582:	d349      	bcc.n	8004618 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <xTaskIncrementTick+0x150>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458e:	4b37      	ldr	r3, [pc, #220]	; (800466c <xTaskIncrementTick+0x15c>)
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	601a      	str	r2, [r3, #0]
					break;
 8004596:	e03f      	b.n	8004618 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004598:	4b31      	ldr	r3, [pc, #196]	; (8004660 <xTaskIncrementTick+0x150>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d203      	bcs.n	80045b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045b0:	4a2e      	ldr	r2, [pc, #184]	; (800466c <xTaskIncrementTick+0x15c>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045b6:	e02f      	b.n	8004618 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fedf 	bl	8003380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	3318      	adds	r3, #24
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe fed6 	bl	8003380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <xTaskIncrementTick+0x160>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d903      	bls.n	80045e8 <xTaskIncrementTick+0xd8>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4a22      	ldr	r2, [pc, #136]	; (8004670 <xTaskIncrementTick+0x160>)
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <xTaskIncrementTick+0x164>)
 80045f6:	441a      	add	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f7fe fe61 	bl	80032c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <xTaskIncrementTick+0x168>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	429a      	cmp	r2, r3
 8004610:	d3b8      	bcc.n	8004584 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004616:	e7b5      	b.n	8004584 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <xTaskIncrementTick+0x168>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4915      	ldr	r1, [pc, #84]	; (8004674 <xTaskIncrementTick+0x164>)
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d901      	bls.n	8004634 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <xTaskIncrementTick+0x16c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e004      	b.n	800464c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <xTaskIncrementTick+0x170>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3301      	adds	r3, #1
 8004648:	4a0d      	ldr	r2, [pc, #52]	; (8004680 <xTaskIncrementTick+0x170>)
 800464a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800464c:	697b      	ldr	r3, [r7, #20]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000d74 	.word	0x20000d74
 800465c:	20000d50 	.word	0x20000d50
 8004660:	20000d04 	.word	0x20000d04
 8004664:	20000d08 	.word	0x20000d08
 8004668:	20000d64 	.word	0x20000d64
 800466c:	20000d6c 	.word	0x20000d6c
 8004670:	20000d54 	.word	0x20000d54
 8004674:	2000087c 	.word	0x2000087c
 8004678:	20000878 	.word	0x20000878
 800467c:	20000d60 	.word	0x20000d60
 8004680:	20000d5c 	.word	0x20000d5c

08004684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800468a:	4b28      	ldr	r3, [pc, #160]	; (800472c <vTaskSwitchContext+0xa8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <vTaskSwitchContext+0xac>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004698:	e041      	b.n	800471e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800469a:	4b25      	ldr	r3, [pc, #148]	; (8004730 <vTaskSwitchContext+0xac>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a0:	4b24      	ldr	r3, [pc, #144]	; (8004734 <vTaskSwitchContext+0xb0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e010      	b.n	80046ca <vTaskSwitchContext+0x46>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	607b      	str	r3, [r7, #4]
}
 80046c0:	bf00      	nop
 80046c2:	e7fe      	b.n	80046c2 <vTaskSwitchContext+0x3e>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	491b      	ldr	r1, [pc, #108]	; (8004738 <vTaskSwitchContext+0xb4>)
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0e4      	beq.n	80046a8 <vTaskSwitchContext+0x24>
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <vTaskSwitchContext+0xb4>)
 80046ea:	4413      	add	r3, r2
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3308      	adds	r3, #8
 8004700:	429a      	cmp	r2, r3
 8004702:	d104      	bne.n	800470e <vTaskSwitchContext+0x8a>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a09      	ldr	r2, [pc, #36]	; (800473c <vTaskSwitchContext+0xb8>)
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4a06      	ldr	r2, [pc, #24]	; (8004734 <vTaskSwitchContext+0xb0>)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6013      	str	r3, [r2, #0]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000d74 	.word	0x20000d74
 8004730:	20000d60 	.word	0x20000d60
 8004734:	20000d54 	.word	0x20000d54
 8004738:	2000087c 	.word	0x2000087c
 800473c:	20000878 	.word	0x20000878

08004740 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <vTaskPlaceOnEventList+0x44>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3318      	adds	r3, #24
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fe fdcd 	bl	800330e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004774:	2101      	movs	r1, #1
 8004776:	6838      	ldr	r0, [r7, #0]
 8004778:	f000 fa7c 	bl	8004c74 <prvAddCurrentTaskToDelayedList>
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000878 	.word	0x20000878

08004788 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	617b      	str	r3, [r7, #20]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <vTaskPlaceOnEventListRestricted+0x54>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3318      	adds	r3, #24
 80047b6:	4619      	mov	r1, r3
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7fe fd84 	bl	80032c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
 80047c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	68b8      	ldr	r0, [r7, #8]
 80047ce:	f000 fa51 	bl	8004c74 <prvAddCurrentTaskToDelayedList>
	}
 80047d2:	bf00      	nop
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000878 	.word	0x20000878

080047e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60fb      	str	r3, [r7, #12]
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	3318      	adds	r3, #24
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe fdb5 	bl	8003380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <xTaskRemoveFromEventList+0xb0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d11d      	bne.n	800485a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3304      	adds	r3, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fdac 	bl	8003380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	4b19      	ldr	r3, [pc, #100]	; (8004894 <xTaskRemoveFromEventList+0xb4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d903      	bls.n	800483c <xTaskRemoveFromEventList+0x5c>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4a16      	ldr	r2, [pc, #88]	; (8004894 <xTaskRemoveFromEventList+0xb4>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <xTaskRemoveFromEventList+0xb8>)
 800484a:	441a      	add	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7fe fd37 	bl	80032c6 <vListInsertEnd>
 8004858:	e005      	b.n	8004866 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	3318      	adds	r3, #24
 800485e:	4619      	mov	r1, r3
 8004860:	480e      	ldr	r0, [pc, #56]	; (800489c <xTaskRemoveFromEventList+0xbc>)
 8004862:	f7fe fd30 	bl	80032c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <xTaskRemoveFromEventList+0xc0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	429a      	cmp	r2, r3
 8004872:	d905      	bls.n	8004880 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004874:	2301      	movs	r3, #1
 8004876:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <xTaskRemoveFromEventList+0xc4>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e001      	b.n	8004884 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004884:	697b      	ldr	r3, [r7, #20]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000d74 	.word	0x20000d74
 8004894:	20000d54 	.word	0x20000d54
 8004898:	2000087c 	.word	0x2000087c
 800489c:	20000d0c 	.word	0x20000d0c
 80048a0:	20000878 	.word	0x20000878
 80048a4:	20000d60 	.word	0x20000d60

080048a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <vTaskInternalSetTimeOutState+0x24>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <vTaskInternalSetTimeOutState+0x28>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	605a      	str	r2, [r3, #4]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	20000d64 	.word	0x20000d64
 80048d0:	20000d50 	.word	0x20000d50

080048d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	613b      	str	r3, [r7, #16]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	60fb      	str	r3, [r7, #12]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004916:	f000 fe7d 	bl	8005614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <xTaskCheckForTimeOut+0xbc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d102      	bne.n	800493a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e023      	b.n	8004982 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <xTaskCheckForTimeOut+0xc0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d007      	beq.n	8004956 <xTaskCheckForTimeOut+0x82>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004950:	2301      	movs	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	e015      	b.n	8004982 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	429a      	cmp	r2, r3
 800495e:	d20b      	bcs.n	8004978 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff9b 	bl	80048a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e004      	b.n	8004982 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800497e:	2301      	movs	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004982:	f000 fe77 	bl	8005674 <vPortExitCritical>

	return xReturn;
 8004986:	69fb      	ldr	r3, [r7, #28]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000d50 	.word	0x20000d50
 8004994:	20000d64 	.word	0x20000d64

08004998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <vTaskMissedYield+0x14>)
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20000d60 	.word	0x20000d60

080049b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049b8:	f000 f852 	bl	8004a60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <prvIdleTask+0x28>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d9f9      	bls.n	80049b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <prvIdleTask+0x2c>)
 80049c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049d4:	e7f0      	b.n	80049b8 <prvIdleTask+0x8>
 80049d6:	bf00      	nop
 80049d8:	2000087c 	.word	0x2000087c
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	e00c      	b.n	8004a06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <prvInitialiseTaskLists+0x60>)
 80049f8:	4413      	add	r3, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fc36 	bl	800326c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3301      	adds	r3, #1
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b37      	cmp	r3, #55	; 0x37
 8004a0a:	d9ef      	bls.n	80049ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a0c:	480d      	ldr	r0, [pc, #52]	; (8004a44 <prvInitialiseTaskLists+0x64>)
 8004a0e:	f7fe fc2d 	bl	800326c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a12:	480d      	ldr	r0, [pc, #52]	; (8004a48 <prvInitialiseTaskLists+0x68>)
 8004a14:	f7fe fc2a 	bl	800326c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a18:	480c      	ldr	r0, [pc, #48]	; (8004a4c <prvInitialiseTaskLists+0x6c>)
 8004a1a:	f7fe fc27 	bl	800326c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a1e:	480c      	ldr	r0, [pc, #48]	; (8004a50 <prvInitialiseTaskLists+0x70>)
 8004a20:	f7fe fc24 	bl	800326c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a24:	480b      	ldr	r0, [pc, #44]	; (8004a54 <prvInitialiseTaskLists+0x74>)
 8004a26:	f7fe fc21 	bl	800326c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <prvInitialiseTaskLists+0x78>)
 8004a2c:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <prvInitialiseTaskLists+0x64>)
 8004a2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <prvInitialiseTaskLists+0x7c>)
 8004a32:	4a05      	ldr	r2, [pc, #20]	; (8004a48 <prvInitialiseTaskLists+0x68>)
 8004a34:	601a      	str	r2, [r3, #0]
}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000087c 	.word	0x2000087c
 8004a44:	20000cdc 	.word	0x20000cdc
 8004a48:	20000cf0 	.word	0x20000cf0
 8004a4c:	20000d0c 	.word	0x20000d0c
 8004a50:	20000d20 	.word	0x20000d20
 8004a54:	20000d38 	.word	0x20000d38
 8004a58:	20000d04 	.word	0x20000d04
 8004a5c:	20000d08 	.word	0x20000d08

08004a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a66:	e019      	b.n	8004a9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a68:	f000 fdd4 	bl	8005614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6c:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <prvCheckTasksWaitingTermination+0x50>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fe fc81 	bl	8003380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <prvCheckTasksWaitingTermination+0x54>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <prvCheckTasksWaitingTermination+0x54>)
 8004a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <prvCheckTasksWaitingTermination+0x58>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <prvCheckTasksWaitingTermination+0x58>)
 8004a90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a92:	f000 fdef 	bl	8005674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f810 	bl	8004abc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <prvCheckTasksWaitingTermination+0x58>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e1      	bne.n	8004a68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000d20 	.word	0x20000d20
 8004ab4:	20000d4c 	.word	0x20000d4c
 8004ab8:	20000d34 	.word	0x20000d34

08004abc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d108      	bne.n	8004ae0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ff8c 	bl	80059f0 <vPortFree>
				vPortFree( pxTCB );
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 ff89 	bl	80059f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ade:	e018      	b.n	8004b12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d103      	bne.n	8004af2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 ff80 	bl	80059f0 <vPortFree>
	}
 8004af0:	e00f      	b.n	8004b12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d00a      	beq.n	8004b12 <prvDeleteTCB+0x56>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <prvDeleteTCB+0x54>
	}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <prvResetNextTaskUnblockTime+0x38>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <prvResetNextTaskUnblockTime+0x3c>)
 8004b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b34:	e008      	b.n	8004b48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <prvResetNextTaskUnblockTime+0x38>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <prvResetNextTaskUnblockTime+0x3c>)
 8004b46:	6013      	str	r3, [r2, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	20000d04 	.word	0x20000d04
 8004b58:	20000d6c 	.word	0x20000d6c

08004b5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <xTaskGetSchedulerState+0x34>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	e008      	b.n	8004b82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <xTaskGetSchedulerState+0x38>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	e001      	b.n	8004b82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b82:	687b      	ldr	r3, [r7, #4]
	}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20000d58 	.word	0x20000d58
 8004b94:	20000d74 	.word	0x20000d74

08004b98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d056      	beq.n	8004c5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <xTaskPriorityDisinherit+0xd0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d00a      	beq.n	8004bce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60fb      	str	r3, [r7, #12]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60bb      	str	r3, [r7, #8]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf0:	1e5a      	subs	r2, r3, #1
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d02c      	beq.n	8004c5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d128      	bne.n	8004c5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fbb6 	bl	8003380 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <xTaskPriorityDisinherit+0xd4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d903      	bls.n	8004c3c <xTaskPriorityDisinherit+0xa4>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <xTaskPriorityDisinherit+0xd4>)
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <xTaskPriorityDisinherit+0xd8>)
 8004c4a:	441a      	add	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f7fe fb37 	bl	80032c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c5c:	697b      	ldr	r3, [r7, #20]
	}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000878 	.word	0x20000878
 8004c6c:	20000d54 	.word	0x20000d54
 8004c70:	2000087c 	.word	0x2000087c

08004c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe fb78 	bl	8003380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d10a      	bne.n	8004cae <prvAddCurrentTaskToDelayedList+0x3a>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4819      	ldr	r0, [pc, #100]	; (8004d0c <prvAddCurrentTaskToDelayedList+0x98>)
 8004ca8:	f7fe fb0d 	bl	80032c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cac:	e026      	b.n	8004cfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d209      	bcs.n	8004cda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc6:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f7fe fb1b 	bl	800330e <vListInsert>
}
 8004cd8:	e010      	b.n	8004cfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7fe fb11 	bl	800330e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d202      	bcs.n	8004cfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cf6:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6013      	str	r3, [r2, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000d50 	.word	0x20000d50
 8004d08:	20000878 	.word	0x20000878
 8004d0c:	20000d38 	.word	0x20000d38
 8004d10:	20000d08 	.word	0x20000d08
 8004d14:	20000d04 	.word	0x20000d04
 8004d18:	20000d6c 	.word	0x20000d6c

08004d1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d26:	f000 fb07 	bl	8005338 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	; (8004d9c <xTimerCreateTimerTask+0x80>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d021      	beq.n	8004d76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d3a:	1d3a      	adds	r2, r7, #4
 8004d3c:	f107 0108 	add.w	r1, r7, #8
 8004d40:	f107 030c 	add.w	r3, r7, #12
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe fa77 	bl	8003238 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	9202      	str	r2, [sp, #8]
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	2302      	movs	r3, #2
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	4910      	ldr	r1, [pc, #64]	; (8004da0 <xTimerCreateTimerTask+0x84>)
 8004d5e:	4811      	ldr	r0, [pc, #68]	; (8004da4 <xTimerCreateTimerTask+0x88>)
 8004d60:	f7ff f8de 	bl	8003f20 <xTaskCreateStatic>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <xTimerCreateTimerTask+0x8c>)
 8004d68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <xTimerCreateTimerTask+0x8c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d72:	2301      	movs	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	613b      	str	r3, [r7, #16]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d92:	697b      	ldr	r3, [r7, #20]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000da8 	.word	0x20000da8
 8004da0:	080065f4 	.word	0x080065f4
 8004da4:	08004ee1 	.word	0x08004ee1
 8004da8:	20000dac 	.word	0x20000dac

08004dac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xTimerGenericCommand+0x2e>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	623b      	str	r3, [r7, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dda:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <xTimerGenericCommand+0x98>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02a      	beq.n	8004e38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b05      	cmp	r3, #5
 8004df2:	dc18      	bgt.n	8004e26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004df4:	f7ff feb2 	bl	8004b5c <xTaskGetSchedulerState>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d109      	bne.n	8004e12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <xTimerGenericCommand+0x98>)
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	f107 0110 	add.w	r1, r7, #16
 8004e06:	2300      	movs	r3, #0
 8004e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0a:	f7fe fc21 	bl	8003650 <xQueueGenericSend>
 8004e0e:	6278      	str	r0, [r7, #36]	; 0x24
 8004e10:	e012      	b.n	8004e38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <xTimerGenericCommand+0x98>)
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	f107 0110 	add.w	r1, r7, #16
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f7fe fc17 	bl	8003650 <xQueueGenericSend>
 8004e22:	6278      	str	r0, [r7, #36]	; 0x24
 8004e24:	e008      	b.n	8004e38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e26:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <xTimerGenericCommand+0x98>)
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	f107 0110 	add.w	r1, r7, #16
 8004e2e:	2300      	movs	r3, #0
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	f7fe fd0b 	bl	800384c <xQueueGenericSendFromISR>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3728      	adds	r7, #40	; 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000da8 	.word	0x20000da8

08004e48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <prvProcessExpiredTimer+0x94>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe fa8d 	bl	8003380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d022      	beq.n	8004eba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	18d1      	adds	r1, r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	6978      	ldr	r0, [r7, #20]
 8004e82:	f000 f8d1 	bl	8005028 <prvInsertTimerInActiveList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01f      	beq.n	8004ecc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2300      	movs	r3, #0
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	2100      	movs	r1, #0
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff ff88 	bl	8004dac <xTimerGenericCommand>
 8004e9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d113      	bne.n	8004ecc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	6978      	ldr	r0, [r7, #20]
 8004ed2:	4798      	blx	r3
}
 8004ed4:	bf00      	nop
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000da0 	.word	0x20000da0

08004ee0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ee8:	f107 0308 	add.w	r3, r7, #8
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f857 	bl	8004fa0 <prvGetNextExpireTime>
 8004ef2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f803 	bl	8004f04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004efe:	f000 f8d5 	bl	80050ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f02:	e7f1      	b.n	8004ee8 <prvTimerTask+0x8>

08004f04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f0e:	f7ff fa43 	bl	8004398 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f12:	f107 0308 	add.w	r3, r7, #8
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f866 	bl	8004fe8 <prvSampleTimeNow>
 8004f1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d130      	bne.n	8004f86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <prvProcessTimerOrBlockTask+0x3c>
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d806      	bhi.n	8004f40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f32:	f7ff fa3f 	bl	80043b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ff85 	bl	8004e48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f3e:	e024      	b.n	8004f8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <prvProcessTimerOrBlockTask+0x90>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <prvProcessTimerOrBlockTask+0x50>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <prvProcessTimerOrBlockTask+0x52>
 8004f54:	2300      	movs	r3, #0
 8004f56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <prvProcessTimerOrBlockTask+0x94>)
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	4619      	mov	r1, r3
 8004f66:	f7fe ffa7 	bl	8003eb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f6a:	f7ff fa23 	bl	80043b4 <xTaskResumeAll>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <prvProcessTimerOrBlockTask+0x98>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
}
 8004f84:	e001      	b.n	8004f8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f86:	f7ff fa15 	bl	80043b4 <xTaskResumeAll>
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000da4 	.word	0x20000da4
 8004f98:	20000da8 	.word	0x20000da8
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <prvGetNextExpireTime+0x44>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <prvGetNextExpireTime+0x16>
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	e000      	b.n	8004fb8 <prvGetNextExpireTime+0x18>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <prvGetNextExpireTime+0x44>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e001      	b.n	8004fd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000da0 	.word	0x20000da0

08004fe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ff0:	f7ff fa7e 	bl	80044f0 <xTaskGetTickCount>
 8004ff4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <prvSampleTimeNow+0x3c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d205      	bcs.n	800500c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005000:	f000 f936 	bl	8005270 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e002      	b.n	8005012 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <prvSampleTimeNow+0x3c>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000db0 	.word	0x20000db0

08005028 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d812      	bhi.n	8005074 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	1ad2      	subs	r2, r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	429a      	cmp	r2, r3
 800505a:	d302      	bcc.n	8005062 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800505c:	2301      	movs	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	e01b      	b.n	800509a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <prvInsertTimerInActiveList+0x7c>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3304      	adds	r3, #4
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f7fe f94e 	bl	800330e <vListInsert>
 8005072:	e012      	b.n	800509a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d206      	bcs.n	800508a <prvInsertTimerInActiveList+0x62>
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	e007      	b.n	800509a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <prvInsertTimerInActiveList+0x80>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3304      	adds	r3, #4
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7fe f93a 	bl	800330e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800509a:	697b      	ldr	r3, [r7, #20]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000da4 	.word	0x20000da4
 80050a8:	20000da0 	.word	0x20000da0

080050ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08e      	sub	sp, #56	; 0x38
 80050b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050b2:	e0ca      	b.n	800524a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da18      	bge.n	80050ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	3304      	adds	r3, #4
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	61fb      	str	r3, [r7, #28]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e2:	6850      	ldr	r0, [r2, #4]
 80050e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	4611      	mov	r1, r2
 80050ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f2c0 80ab 	blt.w	800524a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe f93b 	bl	8003380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800510a:	463b      	mov	r3, r7
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff ff6b 	bl	8004fe8 <prvSampleTimeNow>
 8005112:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b09      	cmp	r3, #9
 8005118:	f200 8096 	bhi.w	8005248 <prvProcessReceivedCommands+0x19c>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <prvProcessReceivedCommands+0x78>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	0800514d 	.word	0x0800514d
 8005128:	0800514d 	.word	0x0800514d
 800512c:	0800514d 	.word	0x0800514d
 8005130:	080051c1 	.word	0x080051c1
 8005134:	080051d5 	.word	0x080051d5
 8005138:	0800521f 	.word	0x0800521f
 800513c:	0800514d 	.word	0x0800514d
 8005140:	0800514d 	.word	0x0800514d
 8005144:	080051c1 	.word	0x080051c1
 8005148:	080051d5 	.word	0x080051d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	b2da      	uxtb	r2, r3
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	18d1      	adds	r1, r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800516c:	f7ff ff5c 	bl	8005028 <prvInsertTimerInActiveList>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d069      	beq.n	800524a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d05e      	beq.n	800524a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	441a      	add	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	2300      	movs	r3, #0
 800519a:	2100      	movs	r1, #0
 800519c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800519e:	f7ff fe05 	bl	8004dac <xTimerGenericCommand>
 80051a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d14f      	bne.n	800524a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	61bb      	str	r3, [r7, #24]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051d2:	e03a      	b.n	800524a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	617b      	str	r3, [r7, #20]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	18d1      	adds	r1, r2, r3
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005218:	f7ff ff06 	bl	8005028 <prvInsertTimerInActiveList>
					break;
 800521c:	e015      	b.n	800524a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800522c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522e:	f000 fbdf 	bl	80059f0 <vPortFree>
 8005232:	e00a      	b.n	800524a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005246:	e000      	b.n	800524a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005248:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <prvProcessReceivedCommands+0x1c0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	1d39      	adds	r1, r7, #4
 8005250:	2200      	movs	r2, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fb96 	bl	8003984 <xQueueReceive>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	f47f af2a 	bne.w	80050b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3730      	adds	r7, #48	; 0x30
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000da8 	.word	0x20000da8

08005270 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005276:	e048      	b.n	800530a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005278:	4b2d      	ldr	r3, [pc, #180]	; (8005330 <prvSwitchTimerLists+0xc0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005282:	4b2b      	ldr	r3, [pc, #172]	; (8005330 <prvSwitchTimerLists+0xc0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3304      	adds	r3, #4
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe f875 	bl	8003380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d02e      	beq.n	800530a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90e      	bls.n	80052dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052ca:	4b19      	ldr	r3, [pc, #100]	; (8005330 <prvSwitchTimerLists+0xc0>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f7fe f81a 	bl	800330e <vListInsert>
 80052da:	e016      	b.n	800530a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052dc:	2300      	movs	r3, #0
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	2300      	movs	r3, #0
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	2100      	movs	r1, #0
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7ff fd60 	bl	8004dac <xTimerGenericCommand>
 80052ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	603b      	str	r3, [r7, #0]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800530a:	4b09      	ldr	r3, [pc, #36]	; (8005330 <prvSwitchTimerLists+0xc0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1b1      	bne.n	8005278 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <prvSwitchTimerLists+0xc0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <prvSwitchTimerLists+0xc4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a04      	ldr	r2, [pc, #16]	; (8005330 <prvSwitchTimerLists+0xc0>)
 8005320:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005322:	4a04      	ldr	r2, [pc, #16]	; (8005334 <prvSwitchTimerLists+0xc4>)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6013      	str	r3, [r2, #0]
}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000da0 	.word	0x20000da0
 8005334:	20000da4 	.word	0x20000da4

08005338 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800533e:	f000 f969 	bl	8005614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d120      	bne.n	800538c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800534a:	4814      	ldr	r0, [pc, #80]	; (800539c <prvCheckForValidListAndQueue+0x64>)
 800534c:	f7fd ff8e 	bl	800326c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005350:	4813      	ldr	r0, [pc, #76]	; (80053a0 <prvCheckForValidListAndQueue+0x68>)
 8005352:	f7fd ff8b 	bl	800326c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <prvCheckForValidListAndQueue+0x6c>)
 8005358:	4a10      	ldr	r2, [pc, #64]	; (800539c <prvCheckForValidListAndQueue+0x64>)
 800535a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <prvCheckForValidListAndQueue+0x70>)
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <prvCheckForValidListAndQueue+0x68>)
 8005360:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005362:	2300      	movs	r3, #0
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	4b11      	ldr	r3, [pc, #68]	; (80053ac <prvCheckForValidListAndQueue+0x74>)
 8005368:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <prvCheckForValidListAndQueue+0x78>)
 800536a:	2110      	movs	r1, #16
 800536c:	200a      	movs	r0, #10
 800536e:	f7fe f899 	bl	80034a4 <xQueueGenericCreateStatic>
 8005372:	4603      	mov	r3, r0
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005376:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005378:	4b07      	ldr	r3, [pc, #28]	; (8005398 <prvCheckForValidListAndQueue+0x60>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	490b      	ldr	r1, [pc, #44]	; (80053b4 <prvCheckForValidListAndQueue+0x7c>)
 8005386:	4618      	mov	r0, r3
 8005388:	f7fe fd6c 	bl	8003e64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800538c:	f000 f972 	bl	8005674 <vPortExitCritical>
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000da8 	.word	0x20000da8
 800539c:	20000d78 	.word	0x20000d78
 80053a0:	20000d8c 	.word	0x20000d8c
 80053a4:	20000da0 	.word	0x20000da0
 80053a8:	20000da4 	.word	0x20000da4
 80053ac:	20000e54 	.word	0x20000e54
 80053b0:	20000db4 	.word	0x20000db4
 80053b4:	080065fc 	.word	0x080065fc

080053b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3b04      	subs	r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b04      	subs	r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3b04      	subs	r3, #4
 80053e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053e8:	4a0c      	ldr	r2, [pc, #48]	; (800541c <pxPortInitialiseStack+0x64>)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3b14      	subs	r3, #20
 80053f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3b04      	subs	r3, #4
 80053fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f06f 0202 	mvn.w	r2, #2
 8005406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3b20      	subs	r3, #32
 800540c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	08005421 	.word	0x08005421

08005420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800542a:	4b12      	ldr	r3, [pc, #72]	; (8005474 <prvTaskExitError+0x54>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d00a      	beq.n	800544a <prvTaskExitError+0x2a>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60fb      	str	r3, [r7, #12]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <prvTaskExitError+0x28>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	60bb      	str	r3, [r7, #8]
}
 800545c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800545e:	bf00      	nop
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0fc      	beq.n	8005460 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	2000000c 	.word	0x2000000c
	...

08005480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <pxCurrentTCBConst2>)
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	6808      	ldr	r0, [r1, #0]
 8005486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	f380 8809 	msr	PSP, r0
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8811 	msr	BASEPRI, r0
 800549a:	4770      	bx	lr
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst2>:
 80054a0:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054a8:	4808      	ldr	r0, [pc, #32]	; (80054cc <prvPortStartFirstTask+0x24>)
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	6800      	ldr	r0, [r0, #0]
 80054ae:	f380 8808 	msr	MSP, r0
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8814 	msr	CONTROL, r0
 80054ba:	b662      	cpsie	i
 80054bc:	b661      	cpsie	f
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	df00      	svc	0
 80054c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054ca:	bf00      	nop
 80054cc:	e000ed08 	.word	0xe000ed08

080054d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054d6:	4b46      	ldr	r3, [pc, #280]	; (80055f0 <xPortStartScheduler+0x120>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a46      	ldr	r2, [pc, #280]	; (80055f4 <xPortStartScheduler+0x124>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10a      	bne.n	80054f6 <xPortStartScheduler+0x26>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	613b      	str	r3, [r7, #16]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <xPortStartScheduler+0x120>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a3f      	ldr	r2, [pc, #252]	; (80055f8 <xPortStartScheduler+0x128>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10a      	bne.n	8005516 <xPortStartScheduler+0x46>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	60fb      	str	r3, [r7, #12]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <xPortStartScheduler+0x12c>)
 8005518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	22ff      	movs	r2, #255	; 0xff
 8005526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4b31      	ldr	r3, [pc, #196]	; (8005600 <xPortStartScheduler+0x130>)
 800553c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800553e:	4b31      	ldr	r3, [pc, #196]	; (8005604 <xPortStartScheduler+0x134>)
 8005540:	2207      	movs	r2, #7
 8005542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005544:	e009      	b.n	800555a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <xPortStartScheduler+0x134>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3b01      	subs	r3, #1
 800554c:	4a2d      	ldr	r2, [pc, #180]	; (8005604 <xPortStartScheduler+0x134>)
 800554e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	b2db      	uxtb	r3, r3
 8005558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d0ef      	beq.n	8005546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005566:	4b27      	ldr	r3, [pc, #156]	; (8005604 <xPortStartScheduler+0x134>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1c3 0307 	rsb	r3, r3, #7
 800556e:	2b04      	cmp	r3, #4
 8005570:	d00a      	beq.n	8005588 <xPortStartScheduler+0xb8>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60bb      	str	r3, [r7, #8]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <xPortStartScheduler+0x134>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <xPortStartScheduler+0x134>)
 8005590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <xPortStartScheduler+0x134>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800559a:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <xPortStartScheduler+0x134>)
 800559c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055a6:	4b18      	ldr	r3, [pc, #96]	; (8005608 <xPortStartScheduler+0x138>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a17      	ldr	r2, [pc, #92]	; (8005608 <xPortStartScheduler+0x138>)
 80055ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <xPortStartScheduler+0x138>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a14      	ldr	r2, [pc, #80]	; (8005608 <xPortStartScheduler+0x138>)
 80055b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055be:	f000 f8dd 	bl	800577c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <xPortStartScheduler+0x13c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055c8:	f000 f8fc 	bl	80057c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <xPortStartScheduler+0x140>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0f      	ldr	r2, [pc, #60]	; (8005610 <xPortStartScheduler+0x140>)
 80055d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055d8:	f7ff ff66 	bl	80054a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055dc:	f7ff f852 	bl	8004684 <vTaskSwitchContext>
	prvTaskExitError();
 80055e0:	f7ff ff1e 	bl	8005420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	e000ed00 	.word	0xe000ed00
 80055f4:	410fc271 	.word	0x410fc271
 80055f8:	410fc270 	.word	0x410fc270
 80055fc:	e000e400 	.word	0xe000e400
 8005600:	20000ea4 	.word	0x20000ea4
 8005604:	20000ea8 	.word	0x20000ea8
 8005608:	e000ed20 	.word	0xe000ed20
 800560c:	2000000c 	.word	0x2000000c
 8005610:	e000ef34 	.word	0xe000ef34

08005614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	607b      	str	r3, [r7, #4]
}
 800562c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800562e:	4b0f      	ldr	r3, [pc, #60]	; (800566c <vPortEnterCritical+0x58>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	4a0d      	ldr	r2, [pc, #52]	; (800566c <vPortEnterCritical+0x58>)
 8005636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <vPortEnterCritical+0x58>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d10f      	bne.n	8005660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <vPortEnterCritical+0x5c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <vPortEnterCritical+0x4c>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	603b      	str	r3, [r7, #0]
}
 800565c:	bf00      	nop
 800565e:	e7fe      	b.n	800565e <vPortEnterCritical+0x4a>
	}
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	2000000c 	.word	0x2000000c
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <vPortExitCritical+0x50>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <vPortExitCritical+0x24>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	607b      	str	r3, [r7, #4]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <vPortExitCritical+0x50>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3b01      	subs	r3, #1
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <vPortExitCritical+0x50>)
 80056a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056a2:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <vPortExitCritical+0x50>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <vPortExitCritical+0x42>
 80056aa:	2300      	movs	r3, #0
 80056ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f383 8811 	msr	BASEPRI, r3
}
 80056b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	2000000c 	.word	0x2000000c
	...

080056d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056d0:	f3ef 8009 	mrs	r0, PSP
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <pxCurrentTCBConst>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	f01e 0f10 	tst.w	lr, #16
 80056e0:	bf08      	it	eq
 80056e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ea:	6010      	str	r0, [r2, #0]
 80056ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056f4:	f380 8811 	msr	BASEPRI, r0
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f7fe ffc0 	bl	8004684 <vTaskSwitchContext>
 8005704:	f04f 0000 	mov.w	r0, #0
 8005708:	f380 8811 	msr	BASEPRI, r0
 800570c:	bc09      	pop	{r0, r3}
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	6808      	ldr	r0, [r1, #0]
 8005712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005716:	f01e 0f10 	tst.w	lr, #16
 800571a:	bf08      	it	eq
 800571c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005720:	f380 8809 	msr	PSP, r0
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	f3af 8000 	nop.w

08005730 <pxCurrentTCBConst>:
 8005730:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop

08005738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005752:	f7fe fedd 	bl	8004510 <xTaskIncrementTick>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <xPortSysTickHandler+0x40>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f383 8811 	msr	BASEPRI, r3
}
 800576e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <vPortSetupTimerInterrupt+0x34>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005786:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <vPortSetupTimerInterrupt+0x38>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <vPortSetupTimerInterrupt+0x3c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <vPortSetupTimerInterrupt+0x40>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	099b      	lsrs	r3, r3, #6
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <vPortSetupTimerInterrupt+0x44>)
 800579a:	3b01      	subs	r3, #1
 800579c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <vPortSetupTimerInterrupt+0x34>)
 80057a0:	2207      	movs	r2, #7
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	e000e010 	.word	0xe000e010
 80057b4:	e000e018 	.word	0xe000e018
 80057b8:	20000000 	.word	0x20000000
 80057bc:	10624dd3 	.word	0x10624dd3
 80057c0:	e000e014 	.word	0xe000e014

080057c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057d4 <vPortEnableVFP+0x10>
 80057c8:	6801      	ldr	r1, [r0, #0]
 80057ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ce:	6001      	str	r1, [r0, #0]
 80057d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057d2:	bf00      	nop
 80057d4:	e000ed88 	.word	0xe000ed88

080057d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057de:	f3ef 8305 	mrs	r3, IPSR
 80057e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	d914      	bls.n	8005814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <vPortValidateInterruptPriority+0x70>)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057f4:	4b15      	ldr	r3, [pc, #84]	; (800584c <vPortValidateInterruptPriority+0x74>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	7afa      	ldrb	r2, [r7, #11]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d20a      	bcs.n	8005814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	607b      	str	r3, [r7, #4]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <vPortValidateInterruptPriority+0x78>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800581c:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <vPortValidateInterruptPriority+0x7c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d90a      	bls.n	800583a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	603b      	str	r3, [r7, #0]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <vPortValidateInterruptPriority+0x60>
	}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	e000e3f0 	.word	0xe000e3f0
 800584c:	20000ea4 	.word	0x20000ea4
 8005850:	e000ed0c 	.word	0xe000ed0c
 8005854:	20000ea8 	.word	0x20000ea8

08005858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005864:	f7fe fd98 	bl	8004398 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005868:	4b5b      	ldr	r3, [pc, #364]	; (80059d8 <pvPortMalloc+0x180>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005870:	f000 f920 	bl	8005ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005874:	4b59      	ldr	r3, [pc, #356]	; (80059dc <pvPortMalloc+0x184>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	f040 8093 	bne.w	80059a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01d      	beq.n	80058c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005888:	2208      	movs	r2, #8
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b00      	cmp	r3, #0
 8005898:	d014      	beq.n	80058c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f023 0307 	bic.w	r3, r3, #7
 80058a0:	3308      	adds	r3, #8
 80058a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <pvPortMalloc+0x6c>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	617b      	str	r3, [r7, #20]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d06e      	beq.n	80059a8 <pvPortMalloc+0x150>
 80058ca:	4b45      	ldr	r3, [pc, #276]	; (80059e0 <pvPortMalloc+0x188>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d869      	bhi.n	80059a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058d4:	4b43      	ldr	r3, [pc, #268]	; (80059e4 <pvPortMalloc+0x18c>)
 80058d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058d8:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <pvPortMalloc+0x18c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058de:	e004      	b.n	80058ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d903      	bls.n	80058fc <pvPortMalloc+0xa4>
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f1      	bne.n	80058e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058fc:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <pvPortMalloc+0x180>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005902:	429a      	cmp	r2, r3
 8005904:	d050      	beq.n	80059a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2208      	movs	r2, #8
 800590c:	4413      	add	r3, r2
 800590e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	2308      	movs	r3, #8
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	429a      	cmp	r2, r3
 8005926:	d91f      	bls.n	8005968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <pvPortMalloc+0xf8>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	613b      	str	r3, [r7, #16]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1ad2      	subs	r2, r2, r3
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005962:	69b8      	ldr	r0, [r7, #24]
 8005964:	f000 f908 	bl	8005b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <pvPortMalloc+0x188>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	4a1b      	ldr	r2, [pc, #108]	; (80059e0 <pvPortMalloc+0x188>)
 8005974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005976:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <pvPortMalloc+0x188>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <pvPortMalloc+0x190>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d203      	bcs.n	800598a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005982:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <pvPortMalloc+0x188>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <pvPortMalloc+0x190>)
 8005988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	4b13      	ldr	r3, [pc, #76]	; (80059dc <pvPortMalloc+0x184>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	431a      	orrs	r2, r3
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <pvPortMalloc+0x194>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3301      	adds	r3, #1
 80059a4:	4a11      	ldr	r2, [pc, #68]	; (80059ec <pvPortMalloc+0x194>)
 80059a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059a8:	f7fe fd04 	bl	80043b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <pvPortMalloc+0x174>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60fb      	str	r3, [r7, #12]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <pvPortMalloc+0x172>
	return pvReturn;
 80059cc:	69fb      	ldr	r3, [r7, #28]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3728      	adds	r7, #40	; 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20004ab4 	.word	0x20004ab4
 80059dc:	20004ac8 	.word	0x20004ac8
 80059e0:	20004ab8 	.word	0x20004ab8
 80059e4:	20004aac 	.word	0x20004aac
 80059e8:	20004abc 	.word	0x20004abc
 80059ec:	20004ac0 	.word	0x20004ac0

080059f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d04d      	beq.n	8005a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a02:	2308      	movs	r3, #8
 8005a04:	425b      	negs	r3, r3
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <vPortFree+0xb8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <vPortFree+0x44>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	60fb      	str	r3, [r7, #12]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <vPortFree+0x62>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60bb      	str	r3, [r7, #8]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <vPortFree+0xb8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01e      	beq.n	8005a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d11a      	bne.n	8005a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <vPortFree+0xb8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a78:	f7fe fc8e 	bl	8004398 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <vPortFree+0xbc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4413      	add	r3, r2
 8005a86:	4a09      	ldr	r2, [pc, #36]	; (8005aac <vPortFree+0xbc>)
 8005a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a8a:	6938      	ldr	r0, [r7, #16]
 8005a8c:	f000 f874 	bl	8005b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <vPortFree+0xc0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	4a06      	ldr	r2, [pc, #24]	; (8005ab0 <vPortFree+0xc0>)
 8005a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a9a:	f7fe fc8b 	bl	80043b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20004ac8 	.word	0x20004ac8
 8005aac:	20004ab8 	.word	0x20004ab8
 8005ab0:	20004ac4 	.word	0x20004ac4

08005ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ac0:	4b27      	ldr	r3, [pc, #156]	; (8005b60 <prvHeapInit+0xac>)
 8005ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3307      	adds	r3, #7
 8005ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0307 	bic.w	r3, r3, #7
 8005ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <prvHeapInit+0xac>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005aec:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <prvHeapInit+0xb0>)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005af2:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <prvHeapInit+0xb0>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b00:	2208      	movs	r2, #8
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a15      	ldr	r2, [pc, #84]	; (8005b68 <prvHeapInit+0xb4>)
 8005b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <prvHeapInit+0xb4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <prvHeapInit+0xb4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <prvHeapInit+0xb4>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <prvHeapInit+0xb8>)
 8005b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <prvHeapInit+0xbc>)
 8005b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <prvHeapInit+0xc0>)
 8005b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b52:	601a      	str	r2, [r3, #0]
}
 8005b54:	bf00      	nop
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	20000eac 	.word	0x20000eac
 8005b64:	20004aac 	.word	0x20004aac
 8005b68:	20004ab4 	.word	0x20004ab4
 8005b6c:	20004abc 	.word	0x20004abc
 8005b70:	20004ab8 	.word	0x20004ab8
 8005b74:	20004ac8 	.word	0x20004ac8

08005b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b80:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <prvInsertBlockIntoFreeList+0xac>)
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e002      	b.n	8005b8c <prvInsertBlockIntoFreeList+0x14>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d8f7      	bhi.n	8005b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d108      	bne.n	8005bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	441a      	add	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	441a      	add	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d118      	bne.n	8005c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <prvInsertBlockIntoFreeList+0xb0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d00d      	beq.n	8005bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	441a      	add	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e008      	b.n	8005c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvInsertBlockIntoFreeList+0xb0>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e003      	b.n	8005c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d002      	beq.n	8005c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20004aac 	.word	0x20004aac
 8005c28:	20004ab4 	.word	0x20004ab4

08005c2c <malloc>:
 8005c2c:	4b02      	ldr	r3, [pc, #8]	; (8005c38 <malloc+0xc>)
 8005c2e:	4601      	mov	r1, r0
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	f000 b823 	b.w	8005c7c <_malloc_r>
 8005c36:	bf00      	nop
 8005c38:	2000005c 	.word	0x2000005c

08005c3c <sbrk_aligned>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4e0e      	ldr	r6, [pc, #56]	; (8005c78 <sbrk_aligned+0x3c>)
 8005c40:	460c      	mov	r4, r1
 8005c42:	6831      	ldr	r1, [r6, #0]
 8005c44:	4605      	mov	r5, r0
 8005c46:	b911      	cbnz	r1, 8005c4e <sbrk_aligned+0x12>
 8005c48:	f000 f8cc 	bl	8005de4 <_sbrk_r>
 8005c4c:	6030      	str	r0, [r6, #0]
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 f8c7 	bl	8005de4 <_sbrk_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	d00a      	beq.n	8005c70 <sbrk_aligned+0x34>
 8005c5a:	1cc4      	adds	r4, r0, #3
 8005c5c:	f024 0403 	bic.w	r4, r4, #3
 8005c60:	42a0      	cmp	r0, r4
 8005c62:	d007      	beq.n	8005c74 <sbrk_aligned+0x38>
 8005c64:	1a21      	subs	r1, r4, r0
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 f8bc 	bl	8005de4 <_sbrk_r>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d101      	bne.n	8005c74 <sbrk_aligned+0x38>
 8005c70:	f04f 34ff 	mov.w	r4, #4294967295
 8005c74:	4620      	mov	r0, r4
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	20004ad0 	.word	0x20004ad0

08005c7c <_malloc_r>:
 8005c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c80:	1ccd      	adds	r5, r1, #3
 8005c82:	f025 0503 	bic.w	r5, r5, #3
 8005c86:	3508      	adds	r5, #8
 8005c88:	2d0c      	cmp	r5, #12
 8005c8a:	bf38      	it	cc
 8005c8c:	250c      	movcc	r5, #12
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	4607      	mov	r7, r0
 8005c92:	db01      	blt.n	8005c98 <_malloc_r+0x1c>
 8005c94:	42a9      	cmp	r1, r5
 8005c96:	d905      	bls.n	8005ca4 <_malloc_r+0x28>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d78 <_malloc_r+0xfc>
 8005ca8:	f000 f868 	bl	8005d7c <__malloc_lock>
 8005cac:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb0:	461c      	mov	r4, r3
 8005cb2:	bb5c      	cbnz	r4, 8005d0c <_malloc_r+0x90>
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	f7ff ffc0 	bl	8005c3c <sbrk_aligned>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	d155      	bne.n	8005d6e <_malloc_r+0xf2>
 8005cc2:	f8d8 4000 	ldr.w	r4, [r8]
 8005cc6:	4626      	mov	r6, r4
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	d145      	bne.n	8005d58 <_malloc_r+0xdc>
 8005ccc:	2c00      	cmp	r4, #0
 8005cce:	d048      	beq.n	8005d62 <_malloc_r+0xe6>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	eb04 0903 	add.w	r9, r4, r3
 8005cda:	f000 f883 	bl	8005de4 <_sbrk_r>
 8005cde:	4581      	cmp	r9, r0
 8005ce0:	d13f      	bne.n	8005d62 <_malloc_r+0xe6>
 8005ce2:	6821      	ldr	r1, [r4, #0]
 8005ce4:	1a6d      	subs	r5, r5, r1
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f7ff ffa7 	bl	8005c3c <sbrk_aligned>
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d037      	beq.n	8005d62 <_malloc_r+0xe6>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	442b      	add	r3, r5
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d038      	beq.n	8005d72 <_malloc_r+0xf6>
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	42a2      	cmp	r2, r4
 8005d04:	d12b      	bne.n	8005d5e <_malloc_r+0xe2>
 8005d06:	2200      	movs	r2, #0
 8005d08:	605a      	str	r2, [r3, #4]
 8005d0a:	e00f      	b.n	8005d2c <_malloc_r+0xb0>
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	1b52      	subs	r2, r2, r5
 8005d10:	d41f      	bmi.n	8005d52 <_malloc_r+0xd6>
 8005d12:	2a0b      	cmp	r2, #11
 8005d14:	d917      	bls.n	8005d46 <_malloc_r+0xca>
 8005d16:	1961      	adds	r1, r4, r5
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	6025      	str	r5, [r4, #0]
 8005d1c:	bf18      	it	ne
 8005d1e:	6059      	strne	r1, [r3, #4]
 8005d20:	6863      	ldr	r3, [r4, #4]
 8005d22:	bf08      	it	eq
 8005d24:	f8c8 1000 	streq.w	r1, [r8]
 8005d28:	5162      	str	r2, [r4, r5]
 8005d2a:	604b      	str	r3, [r1, #4]
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f104 060b 	add.w	r6, r4, #11
 8005d32:	f000 f829 	bl	8005d88 <__malloc_unlock>
 8005d36:	f026 0607 	bic.w	r6, r6, #7
 8005d3a:	1d23      	adds	r3, r4, #4
 8005d3c:	1af2      	subs	r2, r6, r3
 8005d3e:	d0ae      	beq.n	8005c9e <_malloc_r+0x22>
 8005d40:	1b9b      	subs	r3, r3, r6
 8005d42:	50a3      	str	r3, [r4, r2]
 8005d44:	e7ab      	b.n	8005c9e <_malloc_r+0x22>
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	6862      	ldr	r2, [r4, #4]
 8005d4a:	d1dd      	bne.n	8005d08 <_malloc_r+0x8c>
 8005d4c:	f8c8 2000 	str.w	r2, [r8]
 8005d50:	e7ec      	b.n	8005d2c <_malloc_r+0xb0>
 8005d52:	4623      	mov	r3, r4
 8005d54:	6864      	ldr	r4, [r4, #4]
 8005d56:	e7ac      	b.n	8005cb2 <_malloc_r+0x36>
 8005d58:	4634      	mov	r4, r6
 8005d5a:	6876      	ldr	r6, [r6, #4]
 8005d5c:	e7b4      	b.n	8005cc8 <_malloc_r+0x4c>
 8005d5e:	4613      	mov	r3, r2
 8005d60:	e7cc      	b.n	8005cfc <_malloc_r+0x80>
 8005d62:	230c      	movs	r3, #12
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4638      	mov	r0, r7
 8005d68:	f000 f80e 	bl	8005d88 <__malloc_unlock>
 8005d6c:	e797      	b.n	8005c9e <_malloc_r+0x22>
 8005d6e:	6025      	str	r5, [r4, #0]
 8005d70:	e7dc      	b.n	8005d2c <_malloc_r+0xb0>
 8005d72:	605b      	str	r3, [r3, #4]
 8005d74:	deff      	udf	#255	; 0xff
 8005d76:	bf00      	nop
 8005d78:	20004acc 	.word	0x20004acc

08005d7c <__malloc_lock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__malloc_lock+0x8>)
 8005d7e:	f000 b86b 	b.w	8005e58 <__retarget_lock_acquire_recursive>
 8005d82:	bf00      	nop
 8005d84:	20004c10 	.word	0x20004c10

08005d88 <__malloc_unlock>:
 8005d88:	4801      	ldr	r0, [pc, #4]	; (8005d90 <__malloc_unlock+0x8>)
 8005d8a:	f000 b866 	b.w	8005e5a <__retarget_lock_release_recursive>
 8005d8e:	bf00      	nop
 8005d90:	20004c10 	.word	0x20004c10

08005d94 <siprintf>:
 8005d94:	b40e      	push	{r1, r2, r3}
 8005d96:	b500      	push	{lr}
 8005d98:	b09c      	sub	sp, #112	; 0x70
 8005d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d9c:	9002      	str	r0, [sp, #8]
 8005d9e:	9006      	str	r0, [sp, #24]
 8005da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005da4:	4809      	ldr	r0, [pc, #36]	; (8005dcc <siprintf+0x38>)
 8005da6:	9107      	str	r1, [sp, #28]
 8005da8:	9104      	str	r1, [sp, #16]
 8005daa:	4909      	ldr	r1, [pc, #36]	; (8005dd0 <siprintf+0x3c>)
 8005dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db0:	9105      	str	r1, [sp, #20]
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	a902      	add	r1, sp, #8
 8005db8:	f000 f904 	bl	8005fc4 <_svfiprintf_r>
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	b01c      	add	sp, #112	; 0x70
 8005dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc8:	b003      	add	sp, #12
 8005dca:	4770      	bx	lr
 8005dcc:	2000005c 	.word	0x2000005c
 8005dd0:	ffff0208 	.word	0xffff0208

08005dd4 <memset>:
 8005dd4:	4402      	add	r2, r0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d100      	bne.n	8005dde <memset+0xa>
 8005ddc:	4770      	bx	lr
 8005dde:	f803 1b01 	strb.w	r1, [r3], #1
 8005de2:	e7f9      	b.n	8005dd8 <memset+0x4>

08005de4 <_sbrk_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4d06      	ldr	r5, [pc, #24]	; (8005e00 <_sbrk_r+0x1c>)
 8005de8:	2300      	movs	r3, #0
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f7fa ffca 	bl	8000d88 <_sbrk>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_sbrk_r+0x1a>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_sbrk_r+0x1a>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20004c0c 	.word	0x20004c0c

08005e04 <__errno>:
 8005e04:	4b01      	ldr	r3, [pc, #4]	; (8005e0c <__errno+0x8>)
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	2000005c 	.word	0x2000005c

08005e10 <__libc_init_array>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	4d0d      	ldr	r5, [pc, #52]	; (8005e48 <__libc_init_array+0x38>)
 8005e14:	4c0d      	ldr	r4, [pc, #52]	; (8005e4c <__libc_init_array+0x3c>)
 8005e16:	1b64      	subs	r4, r4, r5
 8005e18:	10a4      	asrs	r4, r4, #2
 8005e1a:	2600      	movs	r6, #0
 8005e1c:	42a6      	cmp	r6, r4
 8005e1e:	d109      	bne.n	8005e34 <__libc_init_array+0x24>
 8005e20:	4d0b      	ldr	r5, [pc, #44]	; (8005e50 <__libc_init_array+0x40>)
 8005e22:	4c0c      	ldr	r4, [pc, #48]	; (8005e54 <__libc_init_array+0x44>)
 8005e24:	f000 fbae 	bl	8006584 <_init>
 8005e28:	1b64      	subs	r4, r4, r5
 8005e2a:	10a4      	asrs	r4, r4, #2
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	42a6      	cmp	r6, r4
 8005e30:	d105      	bne.n	8005e3e <__libc_init_array+0x2e>
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e38:	4798      	blx	r3
 8005e3a:	3601      	adds	r6, #1
 8005e3c:	e7ee      	b.n	8005e1c <__libc_init_array+0xc>
 8005e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e42:	4798      	blx	r3
 8005e44:	3601      	adds	r6, #1
 8005e46:	e7f2      	b.n	8005e2e <__libc_init_array+0x1e>
 8005e48:	08006724 	.word	0x08006724
 8005e4c:	08006724 	.word	0x08006724
 8005e50:	08006724 	.word	0x08006724
 8005e54:	08006728 	.word	0x08006728

08005e58 <__retarget_lock_acquire_recursive>:
 8005e58:	4770      	bx	lr

08005e5a <__retarget_lock_release_recursive>:
 8005e5a:	4770      	bx	lr

08005e5c <memcpy>:
 8005e5c:	440a      	add	r2, r1
 8005e5e:	4291      	cmp	r1, r2
 8005e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e64:	d100      	bne.n	8005e68 <memcpy+0xc>
 8005e66:	4770      	bx	lr
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e72:	4291      	cmp	r1, r2
 8005e74:	d1f9      	bne.n	8005e6a <memcpy+0xe>
 8005e76:	bd10      	pop	{r4, pc}

08005e78 <_free_r>:
 8005e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	d044      	beq.n	8005f08 <_free_r+0x90>
 8005e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e82:	9001      	str	r0, [sp, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f1a1 0404 	sub.w	r4, r1, #4
 8005e8a:	bfb8      	it	lt
 8005e8c:	18e4      	addlt	r4, r4, r3
 8005e8e:	f7ff ff75 	bl	8005d7c <__malloc_lock>
 8005e92:	4a1e      	ldr	r2, [pc, #120]	; (8005f0c <_free_r+0x94>)
 8005e94:	9801      	ldr	r0, [sp, #4]
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	b933      	cbnz	r3, 8005ea8 <_free_r+0x30>
 8005e9a:	6063      	str	r3, [r4, #4]
 8005e9c:	6014      	str	r4, [r2, #0]
 8005e9e:	b003      	add	sp, #12
 8005ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ea4:	f7ff bf70 	b.w	8005d88 <__malloc_unlock>
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	d908      	bls.n	8005ebe <_free_r+0x46>
 8005eac:	6825      	ldr	r5, [r4, #0]
 8005eae:	1961      	adds	r1, r4, r5
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	bf01      	itttt	eq
 8005eb4:	6819      	ldreq	r1, [r3, #0]
 8005eb6:	685b      	ldreq	r3, [r3, #4]
 8005eb8:	1949      	addeq	r1, r1, r5
 8005eba:	6021      	streq	r1, [r4, #0]
 8005ebc:	e7ed      	b.n	8005e9a <_free_r+0x22>
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	b10b      	cbz	r3, 8005ec8 <_free_r+0x50>
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	d9fa      	bls.n	8005ebe <_free_r+0x46>
 8005ec8:	6811      	ldr	r1, [r2, #0]
 8005eca:	1855      	adds	r5, r2, r1
 8005ecc:	42a5      	cmp	r5, r4
 8005ece:	d10b      	bne.n	8005ee8 <_free_r+0x70>
 8005ed0:	6824      	ldr	r4, [r4, #0]
 8005ed2:	4421      	add	r1, r4
 8005ed4:	1854      	adds	r4, r2, r1
 8005ed6:	42a3      	cmp	r3, r4
 8005ed8:	6011      	str	r1, [r2, #0]
 8005eda:	d1e0      	bne.n	8005e9e <_free_r+0x26>
 8005edc:	681c      	ldr	r4, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	6053      	str	r3, [r2, #4]
 8005ee2:	440c      	add	r4, r1
 8005ee4:	6014      	str	r4, [r2, #0]
 8005ee6:	e7da      	b.n	8005e9e <_free_r+0x26>
 8005ee8:	d902      	bls.n	8005ef0 <_free_r+0x78>
 8005eea:	230c      	movs	r3, #12
 8005eec:	6003      	str	r3, [r0, #0]
 8005eee:	e7d6      	b.n	8005e9e <_free_r+0x26>
 8005ef0:	6825      	ldr	r5, [r4, #0]
 8005ef2:	1961      	adds	r1, r4, r5
 8005ef4:	428b      	cmp	r3, r1
 8005ef6:	bf04      	itt	eq
 8005ef8:	6819      	ldreq	r1, [r3, #0]
 8005efa:	685b      	ldreq	r3, [r3, #4]
 8005efc:	6063      	str	r3, [r4, #4]
 8005efe:	bf04      	itt	eq
 8005f00:	1949      	addeq	r1, r1, r5
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	6054      	str	r4, [r2, #4]
 8005f06:	e7ca      	b.n	8005e9e <_free_r+0x26>
 8005f08:	b003      	add	sp, #12
 8005f0a:	bd30      	pop	{r4, r5, pc}
 8005f0c:	20004acc 	.word	0x20004acc

08005f10 <__ssputs_r>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	688e      	ldr	r6, [r1, #8]
 8005f16:	461f      	mov	r7, r3
 8005f18:	42be      	cmp	r6, r7
 8005f1a:	680b      	ldr	r3, [r1, #0]
 8005f1c:	4682      	mov	sl, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	4690      	mov	r8, r2
 8005f22:	d82c      	bhi.n	8005f7e <__ssputs_r+0x6e>
 8005f24:	898a      	ldrh	r2, [r1, #12]
 8005f26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f2a:	d026      	beq.n	8005f7a <__ssputs_r+0x6a>
 8005f2c:	6965      	ldr	r5, [r4, #20]
 8005f2e:	6909      	ldr	r1, [r1, #16]
 8005f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f34:	eba3 0901 	sub.w	r9, r3, r1
 8005f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f3c:	1c7b      	adds	r3, r7, #1
 8005f3e:	444b      	add	r3, r9
 8005f40:	106d      	asrs	r5, r5, #1
 8005f42:	429d      	cmp	r5, r3
 8005f44:	bf38      	it	cc
 8005f46:	461d      	movcc	r5, r3
 8005f48:	0553      	lsls	r3, r2, #21
 8005f4a:	d527      	bpl.n	8005f9c <__ssputs_r+0x8c>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f7ff fe95 	bl	8005c7c <_malloc_r>
 8005f52:	4606      	mov	r6, r0
 8005f54:	b360      	cbz	r0, 8005fb0 <__ssputs_r+0xa0>
 8005f56:	6921      	ldr	r1, [r4, #16]
 8005f58:	464a      	mov	r2, r9
 8005f5a:	f7ff ff7f 	bl	8005e5c <memcpy>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	6126      	str	r6, [r4, #16]
 8005f6c:	6165      	str	r5, [r4, #20]
 8005f6e:	444e      	add	r6, r9
 8005f70:	eba5 0509 	sub.w	r5, r5, r9
 8005f74:	6026      	str	r6, [r4, #0]
 8005f76:	60a5      	str	r5, [r4, #8]
 8005f78:	463e      	mov	r6, r7
 8005f7a:	42be      	cmp	r6, r7
 8005f7c:	d900      	bls.n	8005f80 <__ssputs_r+0x70>
 8005f7e:	463e      	mov	r6, r7
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	4632      	mov	r2, r6
 8005f84:	4641      	mov	r1, r8
 8005f86:	f000 faab 	bl	80064e0 <memmove>
 8005f8a:	68a3      	ldr	r3, [r4, #8]
 8005f8c:	1b9b      	subs	r3, r3, r6
 8005f8e:	60a3      	str	r3, [r4, #8]
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	4433      	add	r3, r6
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	2000      	movs	r0, #0
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	f000 fab9 	bl	8006514 <_realloc_r>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d1e0      	bne.n	8005f6a <__ssputs_r+0x5a>
 8005fa8:	6921      	ldr	r1, [r4, #16]
 8005faa:	4650      	mov	r0, sl
 8005fac:	f7ff ff64 	bl	8005e78 <_free_r>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	f8ca 3000 	str.w	r3, [sl]
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc2:	e7e9      	b.n	8005f98 <__ssputs_r+0x88>

08005fc4 <_svfiprintf_r>:
 8005fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	4698      	mov	r8, r3
 8005fca:	898b      	ldrh	r3, [r1, #12]
 8005fcc:	061b      	lsls	r3, r3, #24
 8005fce:	b09d      	sub	sp, #116	; 0x74
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	d50e      	bpl.n	8005ff6 <_svfiprintf_r+0x32>
 8005fd8:	690b      	ldr	r3, [r1, #16]
 8005fda:	b963      	cbnz	r3, 8005ff6 <_svfiprintf_r+0x32>
 8005fdc:	2140      	movs	r1, #64	; 0x40
 8005fde:	f7ff fe4d 	bl	8005c7c <_malloc_r>
 8005fe2:	6028      	str	r0, [r5, #0]
 8005fe4:	6128      	str	r0, [r5, #16]
 8005fe6:	b920      	cbnz	r0, 8005ff2 <_svfiprintf_r+0x2e>
 8005fe8:	230c      	movs	r3, #12
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	e0d0      	b.n	8006194 <_svfiprintf_r+0x1d0>
 8005ff2:	2340      	movs	r3, #64	; 0x40
 8005ff4:	616b      	str	r3, [r5, #20]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffa:	2320      	movs	r3, #32
 8005ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006000:	f8cd 800c 	str.w	r8, [sp, #12]
 8006004:	2330      	movs	r3, #48	; 0x30
 8006006:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80061ac <_svfiprintf_r+0x1e8>
 800600a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800600e:	f04f 0901 	mov.w	r9, #1
 8006012:	4623      	mov	r3, r4
 8006014:	469a      	mov	sl, r3
 8006016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800601a:	b10a      	cbz	r2, 8006020 <_svfiprintf_r+0x5c>
 800601c:	2a25      	cmp	r2, #37	; 0x25
 800601e:	d1f9      	bne.n	8006014 <_svfiprintf_r+0x50>
 8006020:	ebba 0b04 	subs.w	fp, sl, r4
 8006024:	d00b      	beq.n	800603e <_svfiprintf_r+0x7a>
 8006026:	465b      	mov	r3, fp
 8006028:	4622      	mov	r2, r4
 800602a:	4629      	mov	r1, r5
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff ff6f 	bl	8005f10 <__ssputs_r>
 8006032:	3001      	adds	r0, #1
 8006034:	f000 80a9 	beq.w	800618a <_svfiprintf_r+0x1c6>
 8006038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800603a:	445a      	add	r2, fp
 800603c:	9209      	str	r2, [sp, #36]	; 0x24
 800603e:	f89a 3000 	ldrb.w	r3, [sl]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 80a1 	beq.w	800618a <_svfiprintf_r+0x1c6>
 8006048:	2300      	movs	r3, #0
 800604a:	f04f 32ff 	mov.w	r2, #4294967295
 800604e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006052:	f10a 0a01 	add.w	sl, sl, #1
 8006056:	9304      	str	r3, [sp, #16]
 8006058:	9307      	str	r3, [sp, #28]
 800605a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800605e:	931a      	str	r3, [sp, #104]	; 0x68
 8006060:	4654      	mov	r4, sl
 8006062:	2205      	movs	r2, #5
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	4850      	ldr	r0, [pc, #320]	; (80061ac <_svfiprintf_r+0x1e8>)
 800606a:	f7fa f8c1 	bl	80001f0 <memchr>
 800606e:	9a04      	ldr	r2, [sp, #16]
 8006070:	b9d8      	cbnz	r0, 80060aa <_svfiprintf_r+0xe6>
 8006072:	06d0      	lsls	r0, r2, #27
 8006074:	bf44      	itt	mi
 8006076:	2320      	movmi	r3, #32
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800607c:	0711      	lsls	r1, r2, #28
 800607e:	bf44      	itt	mi
 8006080:	232b      	movmi	r3, #43	; 0x2b
 8006082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006086:	f89a 3000 	ldrb.w	r3, [sl]
 800608a:	2b2a      	cmp	r3, #42	; 0x2a
 800608c:	d015      	beq.n	80060ba <_svfiprintf_r+0xf6>
 800608e:	9a07      	ldr	r2, [sp, #28]
 8006090:	4654      	mov	r4, sl
 8006092:	2000      	movs	r0, #0
 8006094:	f04f 0c0a 	mov.w	ip, #10
 8006098:	4621      	mov	r1, r4
 800609a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800609e:	3b30      	subs	r3, #48	; 0x30
 80060a0:	2b09      	cmp	r3, #9
 80060a2:	d94d      	bls.n	8006140 <_svfiprintf_r+0x17c>
 80060a4:	b1b0      	cbz	r0, 80060d4 <_svfiprintf_r+0x110>
 80060a6:	9207      	str	r2, [sp, #28]
 80060a8:	e014      	b.n	80060d4 <_svfiprintf_r+0x110>
 80060aa:	eba0 0308 	sub.w	r3, r0, r8
 80060ae:	fa09 f303 	lsl.w	r3, r9, r3
 80060b2:	4313      	orrs	r3, r2
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	46a2      	mov	sl, r4
 80060b8:	e7d2      	b.n	8006060 <_svfiprintf_r+0x9c>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	9103      	str	r1, [sp, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bfbb      	ittet	lt
 80060c6:	425b      	neglt	r3, r3
 80060c8:	f042 0202 	orrlt.w	r2, r2, #2
 80060cc:	9307      	strge	r3, [sp, #28]
 80060ce:	9307      	strlt	r3, [sp, #28]
 80060d0:	bfb8      	it	lt
 80060d2:	9204      	strlt	r2, [sp, #16]
 80060d4:	7823      	ldrb	r3, [r4, #0]
 80060d6:	2b2e      	cmp	r3, #46	; 0x2e
 80060d8:	d10c      	bne.n	80060f4 <_svfiprintf_r+0x130>
 80060da:	7863      	ldrb	r3, [r4, #1]
 80060dc:	2b2a      	cmp	r3, #42	; 0x2a
 80060de:	d134      	bne.n	800614a <_svfiprintf_r+0x186>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	9203      	str	r2, [sp, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bfb8      	it	lt
 80060ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80060f0:	3402      	adds	r4, #2
 80060f2:	9305      	str	r3, [sp, #20]
 80060f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80061bc <_svfiprintf_r+0x1f8>
 80060f8:	7821      	ldrb	r1, [r4, #0]
 80060fa:	2203      	movs	r2, #3
 80060fc:	4650      	mov	r0, sl
 80060fe:	f7fa f877 	bl	80001f0 <memchr>
 8006102:	b138      	cbz	r0, 8006114 <_svfiprintf_r+0x150>
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	eba0 000a 	sub.w	r0, r0, sl
 800610a:	2240      	movs	r2, #64	; 0x40
 800610c:	4082      	lsls	r2, r0
 800610e:	4313      	orrs	r3, r2
 8006110:	3401      	adds	r4, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006118:	4825      	ldr	r0, [pc, #148]	; (80061b0 <_svfiprintf_r+0x1ec>)
 800611a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800611e:	2206      	movs	r2, #6
 8006120:	f7fa f866 	bl	80001f0 <memchr>
 8006124:	2800      	cmp	r0, #0
 8006126:	d038      	beq.n	800619a <_svfiprintf_r+0x1d6>
 8006128:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <_svfiprintf_r+0x1f0>)
 800612a:	bb1b      	cbnz	r3, 8006174 <_svfiprintf_r+0x1b0>
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	3307      	adds	r3, #7
 8006130:	f023 0307 	bic.w	r3, r3, #7
 8006134:	3308      	adds	r3, #8
 8006136:	9303      	str	r3, [sp, #12]
 8006138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613a:	4433      	add	r3, r6
 800613c:	9309      	str	r3, [sp, #36]	; 0x24
 800613e:	e768      	b.n	8006012 <_svfiprintf_r+0x4e>
 8006140:	fb0c 3202 	mla	r2, ip, r2, r3
 8006144:	460c      	mov	r4, r1
 8006146:	2001      	movs	r0, #1
 8006148:	e7a6      	b.n	8006098 <_svfiprintf_r+0xd4>
 800614a:	2300      	movs	r3, #0
 800614c:	3401      	adds	r4, #1
 800614e:	9305      	str	r3, [sp, #20]
 8006150:	4619      	mov	r1, r3
 8006152:	f04f 0c0a 	mov.w	ip, #10
 8006156:	4620      	mov	r0, r4
 8006158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800615c:	3a30      	subs	r2, #48	; 0x30
 800615e:	2a09      	cmp	r2, #9
 8006160:	d903      	bls.n	800616a <_svfiprintf_r+0x1a6>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0c6      	beq.n	80060f4 <_svfiprintf_r+0x130>
 8006166:	9105      	str	r1, [sp, #20]
 8006168:	e7c4      	b.n	80060f4 <_svfiprintf_r+0x130>
 800616a:	fb0c 2101 	mla	r1, ip, r1, r2
 800616e:	4604      	mov	r4, r0
 8006170:	2301      	movs	r3, #1
 8006172:	e7f0      	b.n	8006156 <_svfiprintf_r+0x192>
 8006174:	ab03      	add	r3, sp, #12
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	462a      	mov	r2, r5
 800617a:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <_svfiprintf_r+0x1f4>)
 800617c:	a904      	add	r1, sp, #16
 800617e:	4638      	mov	r0, r7
 8006180:	f3af 8000 	nop.w
 8006184:	1c42      	adds	r2, r0, #1
 8006186:	4606      	mov	r6, r0
 8006188:	d1d6      	bne.n	8006138 <_svfiprintf_r+0x174>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	065b      	lsls	r3, r3, #25
 800618e:	f53f af2d 	bmi.w	8005fec <_svfiprintf_r+0x28>
 8006192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006194:	b01d      	add	sp, #116	; 0x74
 8006196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619a:	ab03      	add	r3, sp, #12
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	462a      	mov	r2, r5
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <_svfiprintf_r+0x1f4>)
 80061a2:	a904      	add	r1, sp, #16
 80061a4:	4638      	mov	r0, r7
 80061a6:	f000 f879 	bl	800629c <_printf_i>
 80061aa:	e7eb      	b.n	8006184 <_svfiprintf_r+0x1c0>
 80061ac:	080066e8 	.word	0x080066e8
 80061b0:	080066f2 	.word	0x080066f2
 80061b4:	00000000 	.word	0x00000000
 80061b8:	08005f11 	.word	0x08005f11
 80061bc:	080066ee 	.word	0x080066ee

080061c0 <_printf_common>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	4699      	mov	r9, r3
 80061c8:	688a      	ldr	r2, [r1, #8]
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bfb8      	it	lt
 80061d4:	4613      	movlt	r3, r2
 80061d6:	6033      	str	r3, [r6, #0]
 80061d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061dc:	4607      	mov	r7, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	b10a      	cbz	r2, 80061e6 <_printf_common+0x26>
 80061e2:	3301      	adds	r3, #1
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	0699      	lsls	r1, r3, #26
 80061ea:	bf42      	ittt	mi
 80061ec:	6833      	ldrmi	r3, [r6, #0]
 80061ee:	3302      	addmi	r3, #2
 80061f0:	6033      	strmi	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	f015 0506 	ands.w	r5, r5, #6
 80061f8:	d106      	bne.n	8006208 <_printf_common+0x48>
 80061fa:	f104 0a19 	add.w	sl, r4, #25
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	6832      	ldr	r2, [r6, #0]
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	42ab      	cmp	r3, r5
 8006206:	dc26      	bgt.n	8006256 <_printf_common+0x96>
 8006208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800620c:	1e13      	subs	r3, r2, #0
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	bf18      	it	ne
 8006212:	2301      	movne	r3, #1
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d42b      	bmi.n	8006270 <_printf_common+0xb0>
 8006218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800621c:	4649      	mov	r1, r9
 800621e:	4638      	mov	r0, r7
 8006220:	47c0      	blx	r8
 8006222:	3001      	adds	r0, #1
 8006224:	d01e      	beq.n	8006264 <_printf_common+0xa4>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	6922      	ldr	r2, [r4, #16]
 800622a:	f003 0306 	and.w	r3, r3, #6
 800622e:	2b04      	cmp	r3, #4
 8006230:	bf02      	ittt	eq
 8006232:	68e5      	ldreq	r5, [r4, #12]
 8006234:	6833      	ldreq	r3, [r6, #0]
 8006236:	1aed      	subeq	r5, r5, r3
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	bf0c      	ite	eq
 800623c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006240:	2500      	movne	r5, #0
 8006242:	4293      	cmp	r3, r2
 8006244:	bfc4      	itt	gt
 8006246:	1a9b      	subgt	r3, r3, r2
 8006248:	18ed      	addgt	r5, r5, r3
 800624a:	2600      	movs	r6, #0
 800624c:	341a      	adds	r4, #26
 800624e:	42b5      	cmp	r5, r6
 8006250:	d11a      	bne.n	8006288 <_printf_common+0xc8>
 8006252:	2000      	movs	r0, #0
 8006254:	e008      	b.n	8006268 <_printf_common+0xa8>
 8006256:	2301      	movs	r3, #1
 8006258:	4652      	mov	r2, sl
 800625a:	4649      	mov	r1, r9
 800625c:	4638      	mov	r0, r7
 800625e:	47c0      	blx	r8
 8006260:	3001      	adds	r0, #1
 8006262:	d103      	bne.n	800626c <_printf_common+0xac>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	3501      	adds	r5, #1
 800626e:	e7c6      	b.n	80061fe <_printf_common+0x3e>
 8006270:	18e1      	adds	r1, r4, r3
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	2030      	movs	r0, #48	; 0x30
 8006276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800627a:	4422      	add	r2, r4
 800627c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006284:	3302      	adds	r3, #2
 8006286:	e7c7      	b.n	8006218 <_printf_common+0x58>
 8006288:	2301      	movs	r3, #1
 800628a:	4622      	mov	r2, r4
 800628c:	4649      	mov	r1, r9
 800628e:	4638      	mov	r0, r7
 8006290:	47c0      	blx	r8
 8006292:	3001      	adds	r0, #1
 8006294:	d0e6      	beq.n	8006264 <_printf_common+0xa4>
 8006296:	3601      	adds	r6, #1
 8006298:	e7d9      	b.n	800624e <_printf_common+0x8e>
	...

0800629c <_printf_i>:
 800629c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	7e0f      	ldrb	r7, [r1, #24]
 80062a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062a4:	2f78      	cmp	r7, #120	; 0x78
 80062a6:	4691      	mov	r9, r2
 80062a8:	4680      	mov	r8, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	469a      	mov	sl, r3
 80062ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062b2:	d807      	bhi.n	80062c4 <_printf_i+0x28>
 80062b4:	2f62      	cmp	r7, #98	; 0x62
 80062b6:	d80a      	bhi.n	80062ce <_printf_i+0x32>
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	f000 80d4 	beq.w	8006466 <_printf_i+0x1ca>
 80062be:	2f58      	cmp	r7, #88	; 0x58
 80062c0:	f000 80c0 	beq.w	8006444 <_printf_i+0x1a8>
 80062c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062cc:	e03a      	b.n	8006344 <_printf_i+0xa8>
 80062ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062d2:	2b15      	cmp	r3, #21
 80062d4:	d8f6      	bhi.n	80062c4 <_printf_i+0x28>
 80062d6:	a101      	add	r1, pc, #4	; (adr r1, 80062dc <_printf_i+0x40>)
 80062d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006349 	.word	0x08006349
 80062e4:	080062c5 	.word	0x080062c5
 80062e8:	080062c5 	.word	0x080062c5
 80062ec:	080062c5 	.word	0x080062c5
 80062f0:	080062c5 	.word	0x080062c5
 80062f4:	08006349 	.word	0x08006349
 80062f8:	080062c5 	.word	0x080062c5
 80062fc:	080062c5 	.word	0x080062c5
 8006300:	080062c5 	.word	0x080062c5
 8006304:	080062c5 	.word	0x080062c5
 8006308:	0800644d 	.word	0x0800644d
 800630c:	08006375 	.word	0x08006375
 8006310:	08006407 	.word	0x08006407
 8006314:	080062c5 	.word	0x080062c5
 8006318:	080062c5 	.word	0x080062c5
 800631c:	0800646f 	.word	0x0800646f
 8006320:	080062c5 	.word	0x080062c5
 8006324:	08006375 	.word	0x08006375
 8006328:	080062c5 	.word	0x080062c5
 800632c:	080062c5 	.word	0x080062c5
 8006330:	0800640f 	.word	0x0800640f
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	1d1a      	adds	r2, r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	602a      	str	r2, [r5, #0]
 800633c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006344:	2301      	movs	r3, #1
 8006346:	e09f      	b.n	8006488 <_printf_i+0x1ec>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	0607      	lsls	r7, r0, #24
 800634e:	f103 0104 	add.w	r1, r3, #4
 8006352:	6029      	str	r1, [r5, #0]
 8006354:	d501      	bpl.n	800635a <_printf_i+0xbe>
 8006356:	681e      	ldr	r6, [r3, #0]
 8006358:	e003      	b.n	8006362 <_printf_i+0xc6>
 800635a:	0646      	lsls	r6, r0, #25
 800635c:	d5fb      	bpl.n	8006356 <_printf_i+0xba>
 800635e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006362:	2e00      	cmp	r6, #0
 8006364:	da03      	bge.n	800636e <_printf_i+0xd2>
 8006366:	232d      	movs	r3, #45	; 0x2d
 8006368:	4276      	negs	r6, r6
 800636a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636e:	485a      	ldr	r0, [pc, #360]	; (80064d8 <_printf_i+0x23c>)
 8006370:	230a      	movs	r3, #10
 8006372:	e012      	b.n	800639a <_printf_i+0xfe>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	6820      	ldr	r0, [r4, #0]
 8006378:	1d19      	adds	r1, r3, #4
 800637a:	6029      	str	r1, [r5, #0]
 800637c:	0605      	lsls	r5, r0, #24
 800637e:	d501      	bpl.n	8006384 <_printf_i+0xe8>
 8006380:	681e      	ldr	r6, [r3, #0]
 8006382:	e002      	b.n	800638a <_printf_i+0xee>
 8006384:	0641      	lsls	r1, r0, #25
 8006386:	d5fb      	bpl.n	8006380 <_printf_i+0xe4>
 8006388:	881e      	ldrh	r6, [r3, #0]
 800638a:	4853      	ldr	r0, [pc, #332]	; (80064d8 <_printf_i+0x23c>)
 800638c:	2f6f      	cmp	r7, #111	; 0x6f
 800638e:	bf0c      	ite	eq
 8006390:	2308      	moveq	r3, #8
 8006392:	230a      	movne	r3, #10
 8006394:	2100      	movs	r1, #0
 8006396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800639a:	6865      	ldr	r5, [r4, #4]
 800639c:	60a5      	str	r5, [r4, #8]
 800639e:	2d00      	cmp	r5, #0
 80063a0:	bfa2      	ittt	ge
 80063a2:	6821      	ldrge	r1, [r4, #0]
 80063a4:	f021 0104 	bicge.w	r1, r1, #4
 80063a8:	6021      	strge	r1, [r4, #0]
 80063aa:	b90e      	cbnz	r6, 80063b0 <_printf_i+0x114>
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	d04b      	beq.n	8006448 <_printf_i+0x1ac>
 80063b0:	4615      	mov	r5, r2
 80063b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063b6:	fb03 6711 	mls	r7, r3, r1, r6
 80063ba:	5dc7      	ldrb	r7, [r0, r7]
 80063bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063c0:	4637      	mov	r7, r6
 80063c2:	42bb      	cmp	r3, r7
 80063c4:	460e      	mov	r6, r1
 80063c6:	d9f4      	bls.n	80063b2 <_printf_i+0x116>
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d10b      	bne.n	80063e4 <_printf_i+0x148>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07de      	lsls	r6, r3, #31
 80063d0:	d508      	bpl.n	80063e4 <_printf_i+0x148>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	6861      	ldr	r1, [r4, #4]
 80063d6:	4299      	cmp	r1, r3
 80063d8:	bfde      	ittt	le
 80063da:	2330      	movle	r3, #48	; 0x30
 80063dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063e4:	1b52      	subs	r2, r2, r5
 80063e6:	6122      	str	r2, [r4, #16]
 80063e8:	f8cd a000 	str.w	sl, [sp]
 80063ec:	464b      	mov	r3, r9
 80063ee:	aa03      	add	r2, sp, #12
 80063f0:	4621      	mov	r1, r4
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7ff fee4 	bl	80061c0 <_printf_common>
 80063f8:	3001      	adds	r0, #1
 80063fa:	d14a      	bne.n	8006492 <_printf_i+0x1f6>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	b004      	add	sp, #16
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	f043 0320 	orr.w	r3, r3, #32
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	4833      	ldr	r0, [pc, #204]	; (80064dc <_printf_i+0x240>)
 8006410:	2778      	movs	r7, #120	; 0x78
 8006412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	6829      	ldr	r1, [r5, #0]
 800641a:	061f      	lsls	r7, r3, #24
 800641c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006420:	d402      	bmi.n	8006428 <_printf_i+0x18c>
 8006422:	065f      	lsls	r7, r3, #25
 8006424:	bf48      	it	mi
 8006426:	b2b6      	uxthmi	r6, r6
 8006428:	07df      	lsls	r7, r3, #31
 800642a:	bf48      	it	mi
 800642c:	f043 0320 	orrmi.w	r3, r3, #32
 8006430:	6029      	str	r1, [r5, #0]
 8006432:	bf48      	it	mi
 8006434:	6023      	strmi	r3, [r4, #0]
 8006436:	b91e      	cbnz	r6, 8006440 <_printf_i+0x1a4>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	f023 0320 	bic.w	r3, r3, #32
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	2310      	movs	r3, #16
 8006442:	e7a7      	b.n	8006394 <_printf_i+0xf8>
 8006444:	4824      	ldr	r0, [pc, #144]	; (80064d8 <_printf_i+0x23c>)
 8006446:	e7e4      	b.n	8006412 <_printf_i+0x176>
 8006448:	4615      	mov	r5, r2
 800644a:	e7bd      	b.n	80063c8 <_printf_i+0x12c>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	6826      	ldr	r6, [r4, #0]
 8006450:	6961      	ldr	r1, [r4, #20]
 8006452:	1d18      	adds	r0, r3, #4
 8006454:	6028      	str	r0, [r5, #0]
 8006456:	0635      	lsls	r5, r6, #24
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	d501      	bpl.n	8006460 <_printf_i+0x1c4>
 800645c:	6019      	str	r1, [r3, #0]
 800645e:	e002      	b.n	8006466 <_printf_i+0x1ca>
 8006460:	0670      	lsls	r0, r6, #25
 8006462:	d5fb      	bpl.n	800645c <_printf_i+0x1c0>
 8006464:	8019      	strh	r1, [r3, #0]
 8006466:	2300      	movs	r3, #0
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	4615      	mov	r5, r2
 800646c:	e7bc      	b.n	80063e8 <_printf_i+0x14c>
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	1d1a      	adds	r2, r3, #4
 8006472:	602a      	str	r2, [r5, #0]
 8006474:	681d      	ldr	r5, [r3, #0]
 8006476:	6862      	ldr	r2, [r4, #4]
 8006478:	2100      	movs	r1, #0
 800647a:	4628      	mov	r0, r5
 800647c:	f7f9 feb8 	bl	80001f0 <memchr>
 8006480:	b108      	cbz	r0, 8006486 <_printf_i+0x1ea>
 8006482:	1b40      	subs	r0, r0, r5
 8006484:	6060      	str	r0, [r4, #4]
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	2300      	movs	r3, #0
 800648c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006490:	e7aa      	b.n	80063e8 <_printf_i+0x14c>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	462a      	mov	r2, r5
 8006496:	4649      	mov	r1, r9
 8006498:	4640      	mov	r0, r8
 800649a:	47d0      	blx	sl
 800649c:	3001      	adds	r0, #1
 800649e:	d0ad      	beq.n	80063fc <_printf_i+0x160>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	079b      	lsls	r3, r3, #30
 80064a4:	d413      	bmi.n	80064ce <_printf_i+0x232>
 80064a6:	68e0      	ldr	r0, [r4, #12]
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	4298      	cmp	r0, r3
 80064ac:	bfb8      	it	lt
 80064ae:	4618      	movlt	r0, r3
 80064b0:	e7a6      	b.n	8006400 <_printf_i+0x164>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4632      	mov	r2, r6
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	47d0      	blx	sl
 80064bc:	3001      	adds	r0, #1
 80064be:	d09d      	beq.n	80063fc <_printf_i+0x160>
 80064c0:	3501      	adds	r5, #1
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	9903      	ldr	r1, [sp, #12]
 80064c6:	1a5b      	subs	r3, r3, r1
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	dcf2      	bgt.n	80064b2 <_printf_i+0x216>
 80064cc:	e7eb      	b.n	80064a6 <_printf_i+0x20a>
 80064ce:	2500      	movs	r5, #0
 80064d0:	f104 0619 	add.w	r6, r4, #25
 80064d4:	e7f5      	b.n	80064c2 <_printf_i+0x226>
 80064d6:	bf00      	nop
 80064d8:	080066f9 	.word	0x080066f9
 80064dc:	0800670a 	.word	0x0800670a

080064e0 <memmove>:
 80064e0:	4288      	cmp	r0, r1
 80064e2:	b510      	push	{r4, lr}
 80064e4:	eb01 0402 	add.w	r4, r1, r2
 80064e8:	d902      	bls.n	80064f0 <memmove+0x10>
 80064ea:	4284      	cmp	r4, r0
 80064ec:	4623      	mov	r3, r4
 80064ee:	d807      	bhi.n	8006500 <memmove+0x20>
 80064f0:	1e43      	subs	r3, r0, #1
 80064f2:	42a1      	cmp	r1, r4
 80064f4:	d008      	beq.n	8006508 <memmove+0x28>
 80064f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064fe:	e7f8      	b.n	80064f2 <memmove+0x12>
 8006500:	4402      	add	r2, r0
 8006502:	4601      	mov	r1, r0
 8006504:	428a      	cmp	r2, r1
 8006506:	d100      	bne.n	800650a <memmove+0x2a>
 8006508:	bd10      	pop	{r4, pc}
 800650a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800650e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006512:	e7f7      	b.n	8006504 <memmove+0x24>

08006514 <_realloc_r>:
 8006514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006518:	4680      	mov	r8, r0
 800651a:	4614      	mov	r4, r2
 800651c:	460e      	mov	r6, r1
 800651e:	b921      	cbnz	r1, 800652a <_realloc_r+0x16>
 8006520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	4611      	mov	r1, r2
 8006526:	f7ff bba9 	b.w	8005c7c <_malloc_r>
 800652a:	b92a      	cbnz	r2, 8006538 <_realloc_r+0x24>
 800652c:	f7ff fca4 	bl	8005e78 <_free_r>
 8006530:	4625      	mov	r5, r4
 8006532:	4628      	mov	r0, r5
 8006534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006538:	f000 f81b 	bl	8006572 <_malloc_usable_size_r>
 800653c:	4284      	cmp	r4, r0
 800653e:	4607      	mov	r7, r0
 8006540:	d802      	bhi.n	8006548 <_realloc_r+0x34>
 8006542:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006546:	d812      	bhi.n	800656e <_realloc_r+0x5a>
 8006548:	4621      	mov	r1, r4
 800654a:	4640      	mov	r0, r8
 800654c:	f7ff fb96 	bl	8005c7c <_malloc_r>
 8006550:	4605      	mov	r5, r0
 8006552:	2800      	cmp	r0, #0
 8006554:	d0ed      	beq.n	8006532 <_realloc_r+0x1e>
 8006556:	42bc      	cmp	r4, r7
 8006558:	4622      	mov	r2, r4
 800655a:	4631      	mov	r1, r6
 800655c:	bf28      	it	cs
 800655e:	463a      	movcs	r2, r7
 8006560:	f7ff fc7c 	bl	8005e5c <memcpy>
 8006564:	4631      	mov	r1, r6
 8006566:	4640      	mov	r0, r8
 8006568:	f7ff fc86 	bl	8005e78 <_free_r>
 800656c:	e7e1      	b.n	8006532 <_realloc_r+0x1e>
 800656e:	4635      	mov	r5, r6
 8006570:	e7df      	b.n	8006532 <_realloc_r+0x1e>

08006572 <_malloc_usable_size_r>:
 8006572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006576:	1f18      	subs	r0, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	bfbc      	itt	lt
 800657c:	580b      	ldrlt	r3, [r1, r0]
 800657e:	18c0      	addlt	r0, r0, r3
 8006580:	4770      	bx	lr
	...

08006584 <_init>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr

08006590 <_fini>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr
